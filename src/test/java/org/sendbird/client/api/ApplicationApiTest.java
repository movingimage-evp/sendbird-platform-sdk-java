/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.sendbird.client.api;

import org.sendbird.client.ApiException;
import org.openapitools.client.model.AddApnsPushConfigurationData;
import org.openapitools.client.model.AddFcmPushConfigurationData;
import org.openapitools.client.model.AddHmsPushConfigurationData;
import org.openapitools.client.model.AddIpToWhitelistData;
import org.openapitools.client.model.GenerateSecondaryApiTokenData;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse20010;
import org.openapitools.client.model.InlineResponse20011;
import org.openapitools.client.model.InlineResponse20012;
import org.openapitools.client.model.InlineResponse20013;
import org.openapitools.client.model.InlineResponse20014;
import org.openapitools.client.model.InlineResponse20015;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.InlineResponse2005;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2007;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.InlineResponse2009;
import org.openapitools.client.model.UpdateApnsPushConfigurationByIdData;
import org.openapitools.client.model.UpdateDefaultChannelInvitationPreferenceData;
import org.openapitools.client.model.UpdateFcmPushConfigurationByIdData;
import org.openapitools.client.model.UpdateHmsPushConfigurationByIdData;
import org.openapitools.client.model.UpdatePushNotificationContentTemplateData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Ignore
public class ApplicationApiTest {

    private final ApplicationApi api = new ApplicationApi();

    
    /**
     * Add an APNs push configuration
     *
     * ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addApnsPushConfigurationTest() throws ApiException {
        String apiToken = null;
        AddApnsPushConfigurationData addApnsPushConfigurationData = null;
                InlineResponse2003 response = api.addApnsPushConfiguration(apiToken, addApnsPushConfigurationData);
        // TODO: test validations
    }
    
    /**
     * Add a FCM push configuration
     *
     * ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFcmPushConfigurationTest() throws ApiException {
        String apiToken = null;
        AddFcmPushConfigurationData addFcmPushConfigurationData = null;
                InlineResponse2001 response = api.addFcmPushConfiguration(apiToken, addFcmPushConfigurationData);
        // TODO: test validations
    }
    
    /**
     * Add an HMS push configuration
     *
     * ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addHmsPushConfigurationTest() throws ApiException {
        String apiToken = null;
        AddHmsPushConfigurationData addHmsPushConfigurationData = null;
                InlineResponse2002 response = api.addHmsPushConfiguration(apiToken, addHmsPushConfigurationData);
        // TODO: test validations
    }
    
    /**
     * Add an IP to a whitelist
     *
     * ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIpToWhitelistTest() throws ApiException {
        String apiToken = null;
        AddIpToWhitelistData addIpToWhitelistData = null;
                InlineResponse2006 response = api.addIpToWhitelist(apiToken, addIpToWhitelistData);
        // TODO: test validations
    }
    
    /**
     * Delete allowed IPs from a whitelist
     *
     * ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllowedIpsFromWhitelistTest() throws ApiException {
        List<String> ipWhitelistAddresses = null;
        String apiToken = null;
                InlineResponse2006 response = api.deleteAllowedIpsFromWhitelist(ipWhitelistAddresses, apiToken);
        // TODO: test validations
    }
    
    /**
     * Delete an APNs certificate
     *
     * ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApnsCertificateByIdTest() throws ApiException {
        String providerId = null;
        String apiToken = null;
                InlineResponse20013 response = api.deleteApnsCertificateById(providerId, apiToken);
        // TODO: test validations
    }
    
    /**
     * Generate a secondary API token
     *
     * ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateSecondaryApiTokenTest() throws ApiException {
        String apiToken = null;
        GenerateSecondaryApiTokenData generateSecondaryApiTokenData = null;
                InlineResponse2007 response = api.generateSecondaryApiToken(apiToken, generateSecondaryApiTokenData);
        // TODO: test validations
    }
    
    /**
     * List push configurations
     *
     * ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPushConfigurationsTest() throws ApiException {
        String pushType = null;
        String apiToken = null;
                InlineResponse20012 response = api.listPushConfigurations(pushType, apiToken);
        // TODO: test validations
    }
    
    /**
     * List push notification content templates
     *
     * ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPushNotificationContentTemplatesTest() throws ApiException {
        String apiToken = null;
                InlineResponse2004 response = api.listPushNotificationContentTemplates(apiToken);
        // TODO: test validations
    }
    
    /**
     * List secondary API tokens
     *
     * ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecondaryApiTokensTest() throws ApiException {
        String apiToken = null;
                InlineResponse2008 response = api.listSecondaryApiTokens(apiToken);
        // TODO: test validations
    }
    
    /**
     * Remove a push configuration
     *
     * ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePushConfigurationByIdTest() throws ApiException {
        String pushType = null;
        String providerId = null;
        String apiToken = null;
                InlineResponse20013 response = api.removePushConfigurationById(pushType, providerId, apiToken);
        // TODO: test validations
    }
    
    /**
     * Retrieve an IP whitelist
     *
     * ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveIpWhitelistTest() throws ApiException {
        String apiToken = null;
                InlineResponse2006 response = api.retrieveIpWhitelist(apiToken);
        // TODO: test validations
    }
    
    /**
     * Revoke a secondary API token
     *
     * ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeSecondaryApiTokenByTokenTest() throws ApiException {
        String apiToken2 = null;
        String apiToken = null;
                InlineResponse2007 response = api.revokeSecondaryApiTokenByToken(apiToken2, apiToken);
        // TODO: test validations
    }
    
    /**
     * Update an APNs push configuration
     *
     * ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApnsPushConfigurationByIdTest() throws ApiException {
        String providerId = null;
        String apiToken = null;
        UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = null;
                InlineResponse20014 response = api.updateApnsPushConfigurationById(providerId, apiToken, updateApnsPushConfigurationByIdData);
        // TODO: test validations
    }
    
    /**
     * Update default channel invitation preference
     *
     * ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDefaultChannelInvitationPreferenceTest() throws ApiException {
        String apiToken = null;
        UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = null;
                InlineResponse2005 response = api.updateDefaultChannelInvitationPreference(apiToken, updateDefaultChannelInvitationPreferenceData);
        // TODO: test validations
    }
    
    /**
     * Update a FCM push configuration
     *
     * ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFcmPushConfigurationByIdTest() throws ApiException {
        String providerId = null;
        String apiToken = null;
        UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = null;
                InlineResponse20014 response = api.updateFcmPushConfigurationById(providerId, apiToken, updateFcmPushConfigurationByIdData);
        // TODO: test validations
    }
    
    /**
     * Update an HMS push configuration
     *
     * ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHmsPushConfigurationByIdTest() throws ApiException {
        String providerId = null;
        String apiToken = null;
        UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = null;
                InlineResponse20014 response = api.updateHmsPushConfigurationById(providerId, apiToken, updateHmsPushConfigurationByIdData);
        // TODO: test validations
    }
    
    /**
     * Update a push notification content template
     *
     * ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePushNotificationContentTemplateTest() throws ApiException {
        String templateName = null;
        String apiToken = null;
        UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = null;
                InlineResponse20015 response = api.updatePushNotificationContentTemplate(templateName, apiToken, updatePushNotificationContentTemplateData);
        // TODO: test validations
    }
    
    /**
     * View default channel invitation preference
     *
     * ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewDefaultChannelInvitationPreferenceTest() throws ApiException {
        String apiToken = null;
                InlineResponse2005 response = api.viewDefaultChannelInvitationPreference(apiToken);
        // TODO: test validations
    }
    
    /**
     * View number of concurrent connections
     *
     * ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewNumberOfConcurrentConnectionsTest() throws ApiException {
        String apiToken = null;
                InlineResponse200 response = api.viewNumberOfConcurrentConnections(apiToken);
        // TODO: test validations
    }
    
    /**
     * View number of daily active users
     *
     * ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewNumberOfDailyActiveUsersTest() throws ApiException {
        String apiToken = null;
        String date = null;
                InlineResponse20011 response = api.viewNumberOfDailyActiveUsers(apiToken, date);
        // TODO: test validations
    }
    
    /**
     * View number of monthly active users
     *
     * ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewNumberOfMonthlyActiveUsersTest() throws ApiException {
        String apiToken = null;
        String date = null;
                InlineResponse20010 response = api.viewNumberOfMonthlyActiveUsers(apiToken, date);
        // TODO: test validations
    }
    
    /**
     * View number of peak connections
     *
     * ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewNumberOfPeakConnectionsTest() throws ApiException {
        String timeDimension = null;
        Integer startYear = null;
        Integer startMonth = null;
        Integer endYear = null;
        Integer endMonth = null;
        String apiToken = null;
        Integer startDay = null;
        Integer endDay = null;
                InlineResponse2009 response = api.viewNumberOfPeakConnections(timeDimension, startYear, startMonth, endYear, endMonth, apiToken, startDay, endDay);
        // TODO: test validations
    }
    
    /**
     * View a push configuration
     *
     * ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewPushConfigurationByIdTest() throws ApiException {
        String pushType = null;
        String providerId = null;
        String apiToken = null;
                InlineResponse20012 response = api.viewPushConfigurationById(pushType, providerId, apiToken);
        // TODO: test validations
    }
    
    /**
     * View a push notification content template
     *
     * ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template ----------------------------
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewPushNotificationContentTemplateTest() throws ApiException {
        String templateName = null;
        String apiToken = null;
                InlineResponse20015 response = api.viewPushNotificationContentTemplate(templateName, apiToken);
        // TODO: test validations
    }
    
    /**
     * View a secondary API token
     *
     * ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewSecondaryApiTokenByTokenTest() throws ApiException {
        String apiToken2 = null;
        String apiToken = null;
                InlineResponse2007 response = api.viewSecondaryApiTokenByToken(apiToken2, apiToken);
        // TODO: test validations
    }
    
}
