/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.sendbird.client.JSON;

/**
 * AddRegistrationOrDeviceTokenData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-25T20:54:55.542602+01:00[Europe/London]")
public class AddRegistrationOrDeviceTokenData {
  public static final String SERIALIZED_NAME_GCM_REG_TOKEN = "gcm_reg_token";
  @SerializedName(SERIALIZED_NAME_GCM_REG_TOKEN)
  private String gcmRegToken;

  public static final String SERIALIZED_NAME_HUAWEI_DEVICE_TOKEN = "huawei_device_token";
  @SerializedName(SERIALIZED_NAME_HUAWEI_DEVICE_TOKEN)
  private String huaweiDeviceToken;

  public static final String SERIALIZED_NAME_APNS_DEVICE_TOKEN = "apns_device_token";
  @SerializedName(SERIALIZED_NAME_APNS_DEVICE_TOKEN)
  private String apnsDeviceToken;

  public AddRegistrationOrDeviceTokenData() { 
  }

  public AddRegistrationOrDeviceTokenData gcmRegToken(String gcmRegToken) {
    
    this.gcmRegToken = gcmRegToken;
    return this;
  }

   /**
   * Specifies a registration token for Firebase Cloud Messaging (formerly [Google Cloud Messaging](https://developers.google.com/cloud-messaging/)).
   * @return gcmRegToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a registration token for Firebase Cloud Messaging (formerly [Google Cloud Messaging](https://developers.google.com/cloud-messaging/)).")

  public String getGcmRegToken() {
    return gcmRegToken;
  }


  public void setGcmRegToken(String gcmRegToken) {
    this.gcmRegToken = gcmRegToken;
  }


  public AddRegistrationOrDeviceTokenData huaweiDeviceToken(String huaweiDeviceToken) {
    
    this.huaweiDeviceToken = huaweiDeviceToken;
    return this;
  }

   /**
   * Specifies a device token for Huawei Mobile Services.
   * @return huaweiDeviceToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a device token for Huawei Mobile Services.")

  public String getHuaweiDeviceToken() {
    return huaweiDeviceToken;
  }


  public void setHuaweiDeviceToken(String huaweiDeviceToken) {
    this.huaweiDeviceToken = huaweiDeviceToken;
  }


  public AddRegistrationOrDeviceTokenData apnsDeviceToken(String apnsDeviceToken) {
    
    this.apnsDeviceToken = apnsDeviceToken;
    return this;
  }

   /**
   * Specifies a device token for Apple Push Notification Service.
   * @return apnsDeviceToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a device token for Apple Push Notification Service.")

  public String getApnsDeviceToken() {
    return apnsDeviceToken;
  }


  public void setApnsDeviceToken(String apnsDeviceToken) {
    this.apnsDeviceToken = apnsDeviceToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = (AddRegistrationOrDeviceTokenData) o;
    return Objects.equals(this.gcmRegToken, addRegistrationOrDeviceTokenData.gcmRegToken) &&
        Objects.equals(this.huaweiDeviceToken, addRegistrationOrDeviceTokenData.huaweiDeviceToken) &&
        Objects.equals(this.apnsDeviceToken, addRegistrationOrDeviceTokenData.apnsDeviceToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gcmRegToken, huaweiDeviceToken, apnsDeviceToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddRegistrationOrDeviceTokenData {\n");
    sb.append("    gcmRegToken: ").append(toIndentedString(gcmRegToken)).append("\n");
    sb.append("    huaweiDeviceToken: ").append(toIndentedString(huaweiDeviceToken)).append("\n");
    sb.append("    apnsDeviceToken: ").append(toIndentedString(apnsDeviceToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gcm_reg_token");
    openapiFields.add("huawei_device_token");
    openapiFields.add("apns_device_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gcm_reg_token");
    openapiRequiredFields.add("huawei_device_token");
    openapiRequiredFields.add("apns_device_token");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddRegistrationOrDeviceTokenData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AddRegistrationOrDeviceTokenData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddRegistrationOrDeviceTokenData is not found in the empty JSON string", AddRegistrationOrDeviceTokenData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddRegistrationOrDeviceTokenData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddRegistrationOrDeviceTokenData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddRegistrationOrDeviceTokenData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("gcm_reg_token") != null && !jsonObj.get("gcm_reg_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcm_reg_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcm_reg_token").toString()));
      }
      if (jsonObj.get("huawei_device_token") != null && !jsonObj.get("huawei_device_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `huawei_device_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("huawei_device_token").toString()));
      }
      if (jsonObj.get("apns_device_token") != null && !jsonObj.get("apns_device_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apns_device_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apns_device_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddRegistrationOrDeviceTokenData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddRegistrationOrDeviceTokenData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddRegistrationOrDeviceTokenData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddRegistrationOrDeviceTokenData.class));

       return (TypeAdapter<T>) new TypeAdapter<AddRegistrationOrDeviceTokenData>() {
           @Override
           public void write(JsonWriter out, AddRegistrationOrDeviceTokenData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddRegistrationOrDeviceTokenData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddRegistrationOrDeviceTokenData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddRegistrationOrDeviceTokenData
  * @throws IOException if the JSON string is invalid with respect to AddRegistrationOrDeviceTokenData
  */
  public static AddRegistrationOrDeviceTokenData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddRegistrationOrDeviceTokenData.class);
  }

 /**
  * Convert an instance of AddRegistrationOrDeviceTokenData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

