/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UpdateEmojiUrlByKeyData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-10T12:13:33.713738Z[Europe/London]")
public class UpdateEmojiUrlByKeyData {
  public static final String SERIALIZED_NAME_EMOJI_KEY = "emoji_key";
  @SerializedName(SERIALIZED_NAME_EMOJI_KEY)
  private String emojiKey;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public UpdateEmojiUrlByKeyData() { 
  }

  public UpdateEmojiUrlByKeyData emojiKey(String emojiKey) {
    
    this.emojiKey = emojiKey;
    return this;
  }

   /**
   * Specifies the key of the emoji to update.
   * @return emojiKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the key of the emoji to update.")

  public String getEmojiKey() {
    return emojiKey;
  }


  public void setEmojiKey(String emojiKey) {
    this.emojiKey = emojiKey;
  }


  public UpdateEmojiUrlByKeyData url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Specifies the new image URL of the emoji.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the new image URL of the emoji.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = (UpdateEmojiUrlByKeyData) o;
    return Objects.equals(this.emojiKey, updateEmojiUrlByKeyData.emojiKey) &&
        Objects.equals(this.url, updateEmojiUrlByKeyData.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emojiKey, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEmojiUrlByKeyData {\n");
    sb.append("    emojiKey: ").append(toIndentedString(emojiKey)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

