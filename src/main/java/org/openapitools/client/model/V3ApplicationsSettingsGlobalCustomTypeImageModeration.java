/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits;

/**
 * V3ApplicationsSettingsGlobalCustomTypeImageModeration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-29T11:00:21.022543+01:00[Europe/London]")
public class V3ApplicationsSettingsGlobalCustomTypeImageModeration {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_SOFT_BLOCK = "soft_block";
  @SerializedName(SERIALIZED_NAME_SOFT_BLOCK)
  private Boolean softBlock;

  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits limits;

  public static final String SERIALIZED_NAME_CHECK_URLS = "check_urls";
  @SerializedName(SERIALIZED_NAME_CHECK_URLS)
  private Boolean checkUrls;

  public V3ApplicationsSettingsGlobalCustomTypeImageModeration() { 
  }

  public V3ApplicationsSettingsGlobalCustomTypeImageModeration type(Integer type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getType() {
    return type;
  }


  public void setType(Integer type) {
    this.type = type;
  }


  public V3ApplicationsSettingsGlobalCustomTypeImageModeration softBlock(Boolean softBlock) {
    
    this.softBlock = softBlock;
    return this;
  }

   /**
   * Get softBlock
   * @return softBlock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSoftBlock() {
    return softBlock;
  }


  public void setSoftBlock(Boolean softBlock) {
    this.softBlock = softBlock;
  }


  public V3ApplicationsSettingsGlobalCustomTypeImageModeration limits(V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits limits) {
    
    this.limits = limits;
    return this;
  }

   /**
   * Get limits
   * @return limits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits getLimits() {
    return limits;
  }


  public void setLimits(V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits limits) {
    this.limits = limits;
  }


  public V3ApplicationsSettingsGlobalCustomTypeImageModeration checkUrls(Boolean checkUrls) {
    
    this.checkUrls = checkUrls;
    return this;
  }

   /**
   * Get checkUrls
   * @return checkUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCheckUrls() {
    return checkUrls;
  }


  public void setCheckUrls(Boolean checkUrls) {
    this.checkUrls = checkUrls;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V3ApplicationsSettingsGlobalCustomTypeImageModeration v3ApplicationsSettingsGlobalCustomTypeImageModeration = (V3ApplicationsSettingsGlobalCustomTypeImageModeration) o;
    return Objects.equals(this.type, v3ApplicationsSettingsGlobalCustomTypeImageModeration.type) &&
        Objects.equals(this.softBlock, v3ApplicationsSettingsGlobalCustomTypeImageModeration.softBlock) &&
        Objects.equals(this.limits, v3ApplicationsSettingsGlobalCustomTypeImageModeration.limits) &&
        Objects.equals(this.checkUrls, v3ApplicationsSettingsGlobalCustomTypeImageModeration.checkUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, softBlock, limits, checkUrls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V3ApplicationsSettingsGlobalCustomTypeImageModeration {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    softBlock: ").append(toIndentedString(softBlock)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    checkUrls: ").append(toIndentedString(checkUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

