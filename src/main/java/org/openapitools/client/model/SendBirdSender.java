/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SBObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.sendbird.client.JSON;

/**
 * SendBirdSender
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-27T16:32:02.424301+01:00[Europe/London]")
public class SendBirdSender {
  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private String connectionStatus;

  public static final String SERIALIZED_NAME_FRIEND_DISCOVERY_KEY = "friend_discovery_key";
  @SerializedName(SERIALIZED_NAME_FRIEND_DISCOVERY_KEY)
  private String friendDiscoveryKey;

  public static final String SERIALIZED_NAME_FRIEND_NAME = "friend_name";
  @SerializedName(SERIALIZED_NAME_FRIEND_NAME)
  private String friendName;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_BLOCKED_BY_ME = "is_blocked_by_me";
  @SerializedName(SERIALIZED_NAME_IS_BLOCKED_BY_ME)
  private Boolean isBlockedByMe;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private Integer lastSeenAt;

  public static final String SERIALIZED_NAME_META_DATA = "meta_data";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private SBObject metaData;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_PLAIN_PROFILE_URL = "plain_profile_url";
  @SerializedName(SERIALIZED_NAME_PLAIN_PROFILE_URL)
  private String plainProfileUrl;

  public static final String SERIALIZED_NAME_PREFERRED_LANGUAGES = "preferred_languages";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LANGUAGES)
  private List<String> preferredLanguages = null;

  public static final String SERIALIZED_NAME_PROFILE_URL = "profile_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_URL)
  private String profileUrl;

  public static final String SERIALIZED_NAME_REQUIRE_AUTH = "require_auth";
  @SerializedName(SERIALIZED_NAME_REQUIRE_AUTH)
  private Boolean requireAuth;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public SendBirdSender() { 
  }

  public SendBirdSender connectionStatus(String connectionStatus) {
    
    this.connectionStatus = connectionStatus;
    return this;
  }

   /**
   * Get connectionStatus
   * @return connectionStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConnectionStatus() {
    return connectionStatus;
  }


  public void setConnectionStatus(String connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public SendBirdSender friendDiscoveryKey(String friendDiscoveryKey) {
    
    this.friendDiscoveryKey = friendDiscoveryKey;
    return this;
  }

   /**
   * Get friendDiscoveryKey
   * @return friendDiscoveryKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFriendDiscoveryKey() {
    return friendDiscoveryKey;
  }


  public void setFriendDiscoveryKey(String friendDiscoveryKey) {
    this.friendDiscoveryKey = friendDiscoveryKey;
  }


  public SendBirdSender friendName(String friendName) {
    
    this.friendName = friendName;
    return this;
  }

   /**
   * Get friendName
   * @return friendName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFriendName() {
    return friendName;
  }


  public void setFriendName(String friendName) {
    this.friendName = friendName;
  }


  public SendBirdSender isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public SendBirdSender isBlockedByMe(Boolean isBlockedByMe) {
    
    this.isBlockedByMe = isBlockedByMe;
    return this;
  }

   /**
   * Get isBlockedByMe
   * @return isBlockedByMe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsBlockedByMe() {
    return isBlockedByMe;
  }


  public void setIsBlockedByMe(Boolean isBlockedByMe) {
    this.isBlockedByMe = isBlockedByMe;
  }


  public SendBirdSender lastSeenAt(Integer lastSeenAt) {
    
    this.lastSeenAt = lastSeenAt;
    return this;
  }

   /**
   * Get lastSeenAt
   * @return lastSeenAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLastSeenAt() {
    return lastSeenAt;
  }


  public void setLastSeenAt(Integer lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
  }


  public SendBirdSender metaData(SBObject metaData) {
    
    this.metaData = metaData;
    return this;
  }

   /**
   * Get metaData
   * @return metaData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SBObject getMetaData() {
    return metaData;
  }


  public void setMetaData(SBObject metaData) {
    this.metaData = metaData;
  }


  public SendBirdSender nickname(String nickname) {
    
    this.nickname = nickname;
    return this;
  }

   /**
   * Get nickname
   * @return nickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public SendBirdSender plainProfileUrl(String plainProfileUrl) {
    
    this.plainProfileUrl = plainProfileUrl;
    return this;
  }

   /**
   * Get plainProfileUrl
   * @return plainProfileUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlainProfileUrl() {
    return plainProfileUrl;
  }


  public void setPlainProfileUrl(String plainProfileUrl) {
    this.plainProfileUrl = plainProfileUrl;
  }


  public SendBirdSender preferredLanguages(List<String> preferredLanguages) {
    
    this.preferredLanguages = preferredLanguages;
    return this;
  }

  public SendBirdSender addPreferredLanguagesItem(String preferredLanguagesItem) {
    if (this.preferredLanguages == null) {
      this.preferredLanguages = new ArrayList<>();
    }
    this.preferredLanguages.add(preferredLanguagesItem);
    return this;
  }

   /**
   * Get preferredLanguages
   * @return preferredLanguages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getPreferredLanguages() {
    return preferredLanguages;
  }


  public void setPreferredLanguages(List<String> preferredLanguages) {
    this.preferredLanguages = preferredLanguages;
  }


  public SendBirdSender profileUrl(String profileUrl) {
    
    this.profileUrl = profileUrl;
    return this;
  }

   /**
   * Get profileUrl
   * @return profileUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProfileUrl() {
    return profileUrl;
  }


  public void setProfileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
  }


  public SendBirdSender requireAuth(Boolean requireAuth) {
    
    this.requireAuth = requireAuth;
    return this;
  }

   /**
   * Get requireAuth
   * @return requireAuth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequireAuth() {
    return requireAuth;
  }


  public void setRequireAuth(Boolean requireAuth) {
    this.requireAuth = requireAuth;
  }


  public SendBirdSender userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendBirdSender sendBirdSender = (SendBirdSender) o;
    return Objects.equals(this.connectionStatus, sendBirdSender.connectionStatus) &&
        Objects.equals(this.friendDiscoveryKey, sendBirdSender.friendDiscoveryKey) &&
        Objects.equals(this.friendName, sendBirdSender.friendName) &&
        Objects.equals(this.isActive, sendBirdSender.isActive) &&
        Objects.equals(this.isBlockedByMe, sendBirdSender.isBlockedByMe) &&
        Objects.equals(this.lastSeenAt, sendBirdSender.lastSeenAt) &&
        Objects.equals(this.metaData, sendBirdSender.metaData) &&
        Objects.equals(this.nickname, sendBirdSender.nickname) &&
        Objects.equals(this.plainProfileUrl, sendBirdSender.plainProfileUrl) &&
        Objects.equals(this.preferredLanguages, sendBirdSender.preferredLanguages) &&
        Objects.equals(this.profileUrl, sendBirdSender.profileUrl) &&
        Objects.equals(this.requireAuth, sendBirdSender.requireAuth) &&
        Objects.equals(this.userId, sendBirdSender.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionStatus, friendDiscoveryKey, friendName, isActive, isBlockedByMe, lastSeenAt, metaData, nickname, plainProfileUrl, preferredLanguages, profileUrl, requireAuth, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendBirdSender {\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    friendDiscoveryKey: ").append(toIndentedString(friendDiscoveryKey)).append("\n");
    sb.append("    friendName: ").append(toIndentedString(friendName)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isBlockedByMe: ").append(toIndentedString(isBlockedByMe)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    plainProfileUrl: ").append(toIndentedString(plainProfileUrl)).append("\n");
    sb.append("    preferredLanguages: ").append(toIndentedString(preferredLanguages)).append("\n");
    sb.append("    profileUrl: ").append(toIndentedString(profileUrl)).append("\n");
    sb.append("    requireAuth: ").append(toIndentedString(requireAuth)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection_status");
    openapiFields.add("friend_discovery_key");
    openapiFields.add("friend_name");
    openapiFields.add("is_active");
    openapiFields.add("is_blocked_by_me");
    openapiFields.add("last_seen_at");
    openapiFields.add("meta_data");
    openapiFields.add("nickname");
    openapiFields.add("plain_profile_url");
    openapiFields.add("preferred_languages");
    openapiFields.add("profile_url");
    openapiFields.add("require_auth");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SendBirdSender
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SendBirdSender.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendBirdSender is not found in the empty JSON string", SendBirdSender.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SendBirdSender.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendBirdSender` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("connection_status") != null && !jsonObj.get("connection_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_status").toString()));
      }
      if (jsonObj.get("friend_discovery_key") != null && !jsonObj.get("friend_discovery_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friend_discovery_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friend_discovery_key").toString()));
      }
      if (jsonObj.get("friend_name") != null && !jsonObj.get("friend_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friend_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friend_name").toString()));
      }
      // validate the optional field `meta_data`
      if (jsonObj.getAsJsonObject("meta_data") != null) {
        SBObject.validateJsonObject(jsonObj.getAsJsonObject("meta_data"));
      }
      if (jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if (jsonObj.get("plain_profile_url") != null && !jsonObj.get("plain_profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plain_profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plain_profile_url").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("preferred_languages") != null && !jsonObj.get("preferred_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_languages` to be an array in the JSON string but got `%s`", jsonObj.get("preferred_languages").toString()));
      }
      if (jsonObj.get("profile_url") != null && !jsonObj.get("profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_url").toString()));
      }
      if (jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendBirdSender.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendBirdSender' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendBirdSender> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendBirdSender.class));

       return (TypeAdapter<T>) new TypeAdapter<SendBirdSender>() {
           @Override
           public void write(JsonWriter out, SendBirdSender value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendBirdSender read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SendBirdSender given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SendBirdSender
  * @throws IOException if the JSON string is invalid with respect to SendBirdSender
  */
  public static SendBirdSender fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendBirdSender.class);
  }

 /**
  * Convert an instance of SendBirdSender to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

