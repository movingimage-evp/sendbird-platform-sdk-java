/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.sendbird.client.api;

import org.sendbird.client.ApiCallback;
import org.sendbird.client.ApiClient;
import org.sendbird.client.ApiException;
import org.sendbird.client.ApiResponse;
import org.sendbird.client.Configuration;
import org.sendbird.client.Pair;
import org.sendbird.client.ProgressRequestBody;
import org.sendbird.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddEmojiCategoriesResponse;
import org.openapitools.client.model.AddEmojisData;
import org.openapitools.client.model.AddEmojisResponse;
import org.openapitools.client.model.AddExtraDataToMessageData;
import org.openapitools.client.model.AddExtraDataToMessageResponse;
import org.openapitools.client.model.AddReactionToAMessageData;
import org.openapitools.client.model.AddReactionToAMessageResponse;
import org.openapitools.client.model.EnableReactionsData;
import org.openapitools.client.model.EnableReactionsResponse;
import org.openapitools.client.model.GcMarkAllMessagesAsDeliveredData;
import org.openapitools.client.model.GcMarkAllMessagesAsDeliveredResponse;
import org.openapitools.client.model.GcMarkAllMessagesAsReadData;
import org.openapitools.client.model.GcViewNumberOfEachMembersUnreadMessagesResponse;
import org.openapitools.client.model.GetStatisticsDailyResponse;
import org.openapitools.client.model.GetStatisticsMonthlyResponse;
import org.openapitools.client.model.GetStatisticsResponse;
import org.openapitools.client.model.ListAllEmojisAndEmojiCategoriesResponse;
import org.openapitools.client.model.ListAnnouncementGroupsResponse;
import org.openapitools.client.model.ListAnnouncementsResponse;
import org.openapitools.client.model.ListEmojisResponse;
import org.openapitools.client.model.ListMessagesResponse;
import org.openapitools.client.model.ListReactionsOfMessageResponse;
import org.openapitools.client.model.RemoveReactionFromAMessageResponse;
import org.openapitools.client.model.ScheduleAnnouncementData;
import org.openapitools.client.model.ScheduleAnnouncementResponse;
import org.openapitools.client.model.SendBirdEmoji;
import org.openapitools.client.model.SendBirdEmojiCategory;
import org.openapitools.client.model.SendBirdMessageResponse;
import org.openapitools.client.model.SendMessageData;
import org.openapitools.client.model.TranslateMessageIntoOtherLanguagesData;
import org.openapitools.client.model.UpdateAnnouncementByIdData;
import org.openapitools.client.model.UpdateAnnouncementByIdResponse;
import org.openapitools.client.model.UpdateEmojiCategoryUrlByIdData;
import org.openapitools.client.model.UpdateEmojiUrlByKeyData;
import org.openapitools.client.model.UpdateExtraDataInMessageData;
import org.openapitools.client.model.UpdateExtraDataInMessageResponse;
import org.openapitools.client.model.UpdateMessageByIdData;
import org.openapitools.client.model.UseDefaultEmojisData;
import org.openapitools.client.model.UseDefaultEmojisResponse;
import org.openapitools.client.model.ViewTotalNumberOfMessagesInChannelResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addEmojiCategories
     * @param apiToken  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEmojiCategoriesCall(String apiToken, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v3/emoji_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmojiCategoriesValidateBeforeCall(String apiToken, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling addEmojiCategories(Async)");
        }
        

        okhttp3.Call localVarCall = addEmojiCategoriesCall(apiToken, body, _callback);
        return localVarCall;

    }

    /**
     * Add emoji categories
     * ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
     * @param apiToken  (required)
     * @param body  (optional)
     * @return AddEmojiCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AddEmojiCategoriesResponse addEmojiCategories(String apiToken, Object body) throws ApiException {
        ApiResponse<AddEmojiCategoriesResponse> localVarResp = addEmojiCategoriesWithHttpInfo(apiToken, body);
        return localVarResp.getData();
    }

    /**
     * Add emoji categories
     * ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
     * @param apiToken  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AddEmojiCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddEmojiCategoriesResponse> addEmojiCategoriesWithHttpInfo(String apiToken, Object body) throws ApiException {
        okhttp3.Call localVarCall = addEmojiCategoriesValidateBeforeCall(apiToken, body, null);
        Type localVarReturnType = new TypeToken<AddEmojiCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add emoji categories (asynchronously)
     * ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
     * @param apiToken  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEmojiCategoriesAsync(String apiToken, Object body, final ApiCallback<AddEmojiCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmojiCategoriesValidateBeforeCall(apiToken, body, _callback);
        Type localVarReturnType = new TypeToken<AddEmojiCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addEmojis
     * @param apiToken  (required)
     * @param addEmojisData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEmojisCall(String apiToken, AddEmojisData addEmojisData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addEmojisData;

        // create path and map variables
        String localVarPath = "/v3/emojis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmojisValidateBeforeCall(String apiToken, AddEmojisData addEmojisData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling addEmojis(Async)");
        }
        

        okhttp3.Call localVarCall = addEmojisCall(apiToken, addEmojisData, _callback);
        return localVarCall;

    }

    /**
     * Add emojis
     * ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
     * @param apiToken  (required)
     * @param addEmojisData  (optional)
     * @return AddEmojisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AddEmojisResponse addEmojis(String apiToken, AddEmojisData addEmojisData) throws ApiException {
        ApiResponse<AddEmojisResponse> localVarResp = addEmojisWithHttpInfo(apiToken, addEmojisData);
        return localVarResp.getData();
    }

    /**
     * Add emojis
     * ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
     * @param apiToken  (required)
     * @param addEmojisData  (optional)
     * @return ApiResponse&lt;AddEmojisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddEmojisResponse> addEmojisWithHttpInfo(String apiToken, AddEmojisData addEmojisData) throws ApiException {
        okhttp3.Call localVarCall = addEmojisValidateBeforeCall(apiToken, addEmojisData, null);
        Type localVarReturnType = new TypeToken<AddEmojisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add emojis (asynchronously)
     * ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
     * @param apiToken  (required)
     * @param addEmojisData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEmojisAsync(String apiToken, AddEmojisData addEmojisData, final ApiCallback<AddEmojisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmojisValidateBeforeCall(apiToken, addEmojisData, _callback);
        Type localVarReturnType = new TypeToken<AddEmojisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addExtraDataToMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraDataToMessageCall(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addExtraDataToMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExtraDataToMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling addExtraDataToMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling addExtraDataToMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling addExtraDataToMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling addExtraDataToMessage(Async)");
        }
        

        okhttp3.Call localVarCall = addExtraDataToMessageCall(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData, _callback);
        return localVarCall;

    }

    /**
     * Add extra data to a message
     * ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @return AddExtraDataToMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AddExtraDataToMessageResponse addExtraDataToMessage(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData) throws ApiException {
        ApiResponse<AddExtraDataToMessageResponse> localVarResp = addExtraDataToMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData);
        return localVarResp.getData();
    }

    /**
     * Add extra data to a message
     * ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @return ApiResponse&lt;AddExtraDataToMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddExtraDataToMessageResponse> addExtraDataToMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData) throws ApiException {
        okhttp3.Call localVarCall = addExtraDataToMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData, null);
        Type localVarReturnType = new TypeToken<AddExtraDataToMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add extra data to a message (asynchronously)
     * ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraDataToMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData, final ApiCallback<AddExtraDataToMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExtraDataToMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData, _callback);
        Type localVarReturnType = new TypeToken<AddExtraDataToMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addReactionToAMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addReactionToAMessageCall(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addReactionToAMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addReactionToAMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling addReactionToAMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling addReactionToAMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling addReactionToAMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling addReactionToAMessage(Async)");
        }
        

        okhttp3.Call localVarCall = addReactionToAMessageCall(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData, _callback);
        return localVarCall;

    }

    /**
     * Add a reaction to a message
     * ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @return AddReactionToAMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AddReactionToAMessageResponse addReactionToAMessage(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData) throws ApiException {
        ApiResponse<AddReactionToAMessageResponse> localVarResp = addReactionToAMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData);
        return localVarResp.getData();
    }

    /**
     * Add a reaction to a message
     * ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @return ApiResponse&lt;AddReactionToAMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddReactionToAMessageResponse> addReactionToAMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData) throws ApiException {
        okhttp3.Call localVarCall = addReactionToAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData, null);
        Type localVarReturnType = new TypeToken<AddReactionToAMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a reaction to a message (asynchronously)
     * ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addReactionToAMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData, final ApiCallback<AddReactionToAMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addReactionToAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData, _callback);
        Type localVarReturnType = new TypeToken<AddReactionToAMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEmojiByKey
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmojiByKeyCall(String apiToken, String emojiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/emojis/{emoji_key}"
            .replaceAll("\\{" + "emoji_key" + "\\}", localVarApiClient.escapeString(emojiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmojiByKeyValidateBeforeCall(String apiToken, String emojiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling deleteEmojiByKey(Async)");
        }
        
        // verify the required parameter 'emojiKey' is set
        if (emojiKey == null) {
            throw new ApiException("Missing the required parameter 'emojiKey' when calling deleteEmojiByKey(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEmojiByKeyCall(apiToken, emojiKey, _callback);
        return localVarCall;

    }

    /**
     * Delete an emoji
     * ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEmojiByKey(String apiToken, String emojiKey) throws ApiException {
        deleteEmojiByKeyWithHttpInfo(apiToken, emojiKey);
    }

    /**
     * Delete an emoji
     * ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEmojiByKeyWithHttpInfo(String apiToken, String emojiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteEmojiByKeyValidateBeforeCall(apiToken, emojiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an emoji (asynchronously)
     * ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmojiByKeyAsync(String apiToken, String emojiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmojiByKeyValidateBeforeCall(apiToken, emojiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEmojiCategoryById
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmojiCategoryByIdCall(String apiToken, String emojiCategoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/emoji_categories/{emoji_category_id}"
            .replaceAll("\\{" + "emoji_category_id" + "\\}", localVarApiClient.escapeString(emojiCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmojiCategoryByIdValidateBeforeCall(String apiToken, String emojiCategoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling deleteEmojiCategoryById(Async)");
        }
        
        // verify the required parameter 'emojiCategoryId' is set
        if (emojiCategoryId == null) {
            throw new ApiException("Missing the required parameter 'emojiCategoryId' when calling deleteEmojiCategoryById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEmojiCategoryByIdCall(apiToken, emojiCategoryId, _callback);
        return localVarCall;

    }

    /**
     * Delete an emoji category
     * ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category ----------------------------
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteEmojiCategoryById(String apiToken, String emojiCategoryId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteEmojiCategoryByIdWithHttpInfo(apiToken, emojiCategoryId);
        return localVarResp.getData();
    }

    /**
     * Delete an emoji category
     * ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category ----------------------------
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteEmojiCategoryByIdWithHttpInfo(String apiToken, String emojiCategoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmojiCategoryByIdValidateBeforeCall(apiToken, emojiCategoryId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an emoji category (asynchronously)
     * ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category ----------------------------
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmojiCategoryByIdAsync(String apiToken, String emojiCategoryId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmojiCategoryByIdValidateBeforeCall(apiToken, emojiCategoryId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessageById
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageByIdCall(String apiToken, String channelType, String channelUrl, String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageByIdValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling deleteMessageById(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling deleteMessageById(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling deleteMessageById(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMessageById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMessageByIdCall(apiToken, channelType, channelUrl, messageId, _callback);
        return localVarCall;

    }

    /**
     * Delete a message
     * ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMessageById(String apiToken, String channelType, String channelUrl, String messageId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId);
        return localVarResp.getData();
    }

    /**
     * Delete a message
     * ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMessageByIdWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a message (asynchronously)
     * ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageByIdAsync(String apiToken, String channelType, String channelUrl, String messageId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableReactions
     * @param apiToken  (required)
     * @param enableReactionsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableReactionsCall(String apiToken, EnableReactionsData enableReactionsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableReactionsData;

        // create path and map variables
        String localVarPath = "/v3/applications/settings/reactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableReactionsValidateBeforeCall(String apiToken, EnableReactionsData enableReactionsData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling enableReactions(Async)");
        }
        

        okhttp3.Call localVarCall = enableReactionsCall(apiToken, enableReactionsData, _callback);
        return localVarCall;

    }

    /**
     * Enable reactions
     * ## Enable reactions  Turn on or off reactions in a Sendbird application.  &gt; __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
     * @param apiToken  (required)
     * @param enableReactionsData  (optional)
     * @return EnableReactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EnableReactionsResponse enableReactions(String apiToken, EnableReactionsData enableReactionsData) throws ApiException {
        ApiResponse<EnableReactionsResponse> localVarResp = enableReactionsWithHttpInfo(apiToken, enableReactionsData);
        return localVarResp.getData();
    }

    /**
     * Enable reactions
     * ## Enable reactions  Turn on or off reactions in a Sendbird application.  &gt; __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
     * @param apiToken  (required)
     * @param enableReactionsData  (optional)
     * @return ApiResponse&lt;EnableReactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableReactionsResponse> enableReactionsWithHttpInfo(String apiToken, EnableReactionsData enableReactionsData) throws ApiException {
        okhttp3.Call localVarCall = enableReactionsValidateBeforeCall(apiToken, enableReactionsData, null);
        Type localVarReturnType = new TypeToken<EnableReactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable reactions (asynchronously)
     * ## Enable reactions  Turn on or off reactions in a Sendbird application.  &gt; __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
     * @param apiToken  (required)
     * @param enableReactionsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableReactionsAsync(String apiToken, EnableReactionsData enableReactionsData, final ApiCallback<EnableReactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableReactionsValidateBeforeCall(apiToken, enableReactionsData, _callback);
        Type localVarReturnType = new TypeToken<EnableReactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcMarkAllMessagesAsDelivered
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsDeliveredCall(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcMarkAllMessagesAsDeliveredData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_delivered"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcMarkAllMessagesAsDeliveredValidateBeforeCall(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling gcMarkAllMessagesAsDelivered(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcMarkAllMessagesAsDelivered(Async)");
        }
        

        okhttp3.Call localVarCall = gcMarkAllMessagesAsDeliveredCall(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData, _callback);
        return localVarCall;

    }

    /**
     * Mark all messages as delivered
     * ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @return GcMarkAllMessagesAsDeliveredResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GcMarkAllMessagesAsDeliveredResponse gcMarkAllMessagesAsDelivered(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData) throws ApiException {
        ApiResponse<GcMarkAllMessagesAsDeliveredResponse> localVarResp = gcMarkAllMessagesAsDeliveredWithHttpInfo(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData);
        return localVarResp.getData();
    }

    /**
     * Mark all messages as delivered
     * ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @return ApiResponse&lt;GcMarkAllMessagesAsDeliveredResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GcMarkAllMessagesAsDeliveredResponse> gcMarkAllMessagesAsDeliveredWithHttpInfo(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData) throws ApiException {
        okhttp3.Call localVarCall = gcMarkAllMessagesAsDeliveredValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData, null);
        Type localVarReturnType = new TypeToken<GcMarkAllMessagesAsDeliveredResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark all messages as delivered (asynchronously)
     * ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsDeliveredAsync(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData, final ApiCallback<GcMarkAllMessagesAsDeliveredResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcMarkAllMessagesAsDeliveredValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData, _callback);
        Type localVarReturnType = new TypeToken<GcMarkAllMessagesAsDeliveredResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcMarkAllMessagesAsRead
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsReadCall(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcMarkAllMessagesAsReadData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcMarkAllMessagesAsReadValidateBeforeCall(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling gcMarkAllMessagesAsRead(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcMarkAllMessagesAsRead(Async)");
        }
        

        okhttp3.Call localVarCall = gcMarkAllMessagesAsReadCall(apiToken, channelUrl, gcMarkAllMessagesAsReadData, _callback);
        return localVarCall;

    }

    /**
     * Mark all messages as read
     * ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Object gcMarkAllMessagesAsRead(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData) throws ApiException {
        ApiResponse<Object> localVarResp = gcMarkAllMessagesAsReadWithHttpInfo(apiToken, channelUrl, gcMarkAllMessagesAsReadData);
        return localVarResp.getData();
    }

    /**
     * Mark all messages as read
     * ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gcMarkAllMessagesAsReadWithHttpInfo(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData) throws ApiException {
        okhttp3.Call localVarCall = gcMarkAllMessagesAsReadValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsReadData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark all messages as read (asynchronously)
     * ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsReadAsync(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcMarkAllMessagesAsReadValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsReadData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcViewNumberOfEachMembersUnreadMessages
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewNumberOfEachMembersUnreadMessagesCall(String apiToken, String channelUrl, String userIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/messages/unread_count"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_ids", userIds));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcViewNumberOfEachMembersUnreadMessagesValidateBeforeCall(String apiToken, String channelUrl, String userIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling gcViewNumberOfEachMembersUnreadMessages(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcViewNumberOfEachMembersUnreadMessages(Async)");
        }
        

        okhttp3.Call localVarCall = gcViewNumberOfEachMembersUnreadMessagesCall(apiToken, channelUrl, userIds, _callback);
        return localVarCall;

    }

    /**
     * View number of each member&#39;s unread messages
     * ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @return GcViewNumberOfEachMembersUnreadMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GcViewNumberOfEachMembersUnreadMessagesResponse gcViewNumberOfEachMembersUnreadMessages(String apiToken, String channelUrl, String userIds) throws ApiException {
        ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> localVarResp = gcViewNumberOfEachMembersUnreadMessagesWithHttpInfo(apiToken, channelUrl, userIds);
        return localVarResp.getData();
    }

    /**
     * View number of each member&#39;s unread messages
     * ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @return ApiResponse&lt;GcViewNumberOfEachMembersUnreadMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> gcViewNumberOfEachMembersUnreadMessagesWithHttpInfo(String apiToken, String channelUrl, String userIds) throws ApiException {
        okhttp3.Call localVarCall = gcViewNumberOfEachMembersUnreadMessagesValidateBeforeCall(apiToken, channelUrl, userIds, null);
        Type localVarReturnType = new TypeToken<GcViewNumberOfEachMembersUnreadMessagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View number of each member&#39;s unread messages (asynchronously)
     * ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewNumberOfEachMembersUnreadMessagesAsync(String apiToken, String channelUrl, String userIds, final ApiCallback<GcViewNumberOfEachMembersUnreadMessagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcViewNumberOfEachMembersUnreadMessagesValidateBeforeCall(apiToken, channelUrl, userIds, _callback);
        Type localVarReturnType = new TypeToken<GcViewNumberOfEachMembersUnreadMessagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmojiByKey
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmojiByKeyCall(String apiToken, String emojiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/emojis/{emoji_key}"
            .replaceAll("\\{" + "emoji_key" + "\\}", localVarApiClient.escapeString(emojiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmojiByKeyValidateBeforeCall(String apiToken, String emojiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling getEmojiByKey(Async)");
        }
        
        // verify the required parameter 'emojiKey' is set
        if (emojiKey == null) {
            throw new ApiException("Missing the required parameter 'emojiKey' when calling getEmojiByKey(Async)");
        }
        

        okhttp3.Call localVarCall = getEmojiByKeyCall(apiToken, emojiKey, _callback);
        return localVarCall;

    }

    /**
     * Get an emoji
     * ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @return SendBirdEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdEmoji getEmojiByKey(String apiToken, String emojiKey) throws ApiException {
        ApiResponse<SendBirdEmoji> localVarResp = getEmojiByKeyWithHttpInfo(apiToken, emojiKey);
        return localVarResp.getData();
    }

    /**
     * Get an emoji
     * ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @return ApiResponse&lt;SendBirdEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdEmoji> getEmojiByKeyWithHttpInfo(String apiToken, String emojiKey) throws ApiException {
        okhttp3.Call localVarCall = getEmojiByKeyValidateBeforeCall(apiToken, emojiKey, null);
        Type localVarReturnType = new TypeToken<SendBirdEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an emoji (asynchronously)
     * ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmojiByKeyAsync(String apiToken, String emojiKey, final ApiCallback<SendBirdEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmojiByKeyValidateBeforeCall(apiToken, emojiKey, _callback);
        Type localVarReturnType = new TypeToken<SendBirdEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmojiCategoryById
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmojiCategoryByIdCall(String apiToken, String emojiCategoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/emoji_categories/{emoji_category_id}"
            .replaceAll("\\{" + "emoji_category_id" + "\\}", localVarApiClient.escapeString(emojiCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmojiCategoryByIdValidateBeforeCall(String apiToken, String emojiCategoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling getEmojiCategoryById(Async)");
        }
        
        // verify the required parameter 'emojiCategoryId' is set
        if (emojiCategoryId == null) {
            throw new ApiException("Missing the required parameter 'emojiCategoryId' when calling getEmojiCategoryById(Async)");
        }
        

        okhttp3.Call localVarCall = getEmojiCategoryByIdCall(apiToken, emojiCategoryId, _callback);
        return localVarCall;

    }

    /**
     * Get an emoji category
     * ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category ----------------------------   &#x60;emoji_category_id&#x60;      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @return SendBirdEmojiCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdEmojiCategory getEmojiCategoryById(String apiToken, String emojiCategoryId) throws ApiException {
        ApiResponse<SendBirdEmojiCategory> localVarResp = getEmojiCategoryByIdWithHttpInfo(apiToken, emojiCategoryId);
        return localVarResp.getData();
    }

    /**
     * Get an emoji category
     * ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category ----------------------------   &#x60;emoji_category_id&#x60;      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @return ApiResponse&lt;SendBirdEmojiCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdEmojiCategory> getEmojiCategoryByIdWithHttpInfo(String apiToken, String emojiCategoryId) throws ApiException {
        okhttp3.Call localVarCall = getEmojiCategoryByIdValidateBeforeCall(apiToken, emojiCategoryId, null);
        Type localVarReturnType = new TypeToken<SendBirdEmojiCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an emoji category (asynchronously)
     * ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category ----------------------------   &#x60;emoji_category_id&#x60;      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmojiCategoryByIdAsync(String apiToken, String emojiCategoryId, final ApiCallback<SendBirdEmojiCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmojiCategoryByIdValidateBeforeCall(apiToken, emojiCategoryId, _callback);
        Type localVarReturnType = new TypeToken<SendBirdEmojiCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatistics
     * @param apiToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsCall(String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/announcement_stats/weekly";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsValidateBeforeCall(String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling getStatistics(Async)");
        }
        

        okhttp3.Call localVarCall = getStatisticsCall(apiToken, _callback);
        return localVarCall;

    }

    /**
     * Get statistics - weekly
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @return GetStatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetStatisticsResponse getStatistics(String apiToken) throws ApiException {
        ApiResponse<GetStatisticsResponse> localVarResp = getStatisticsWithHttpInfo(apiToken);
        return localVarResp.getData();
    }

    /**
     * Get statistics - weekly
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @return ApiResponse&lt;GetStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatisticsResponse> getStatisticsWithHttpInfo(String apiToken) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(apiToken, null);
        Type localVarReturnType = new TypeToken<GetStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get statistics - weekly (asynchronously)
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsAsync(String apiToken, final ApiCallback<GetStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(apiToken, _callback);
        Type localVarReturnType = new TypeToken<GetStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatisticsDaily
     * @param apiToken  (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startWeek  (required)
     * @param endWeek  (required)
     * @param startMonth  (required)
     * @param endMonth  (required)
     * @param announcementGroup  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsDailyCall(String apiToken, String startDate, String endDate, String startWeek, String endWeek, String startMonth, String endMonth, String announcementGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/announcement_stats/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (startWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_week", startWeek));
        }

        if (endWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_week", endWeek));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        if (announcementGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("announcement_group", announcementGroup));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsDailyValidateBeforeCall(String apiToken, String startDate, String endDate, String startWeek, String endWeek, String startMonth, String endMonth, String announcementGroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling getStatisticsDaily(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getStatisticsDaily(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getStatisticsDaily(Async)");
        }
        
        // verify the required parameter 'startWeek' is set
        if (startWeek == null) {
            throw new ApiException("Missing the required parameter 'startWeek' when calling getStatisticsDaily(Async)");
        }
        
        // verify the required parameter 'endWeek' is set
        if (endWeek == null) {
            throw new ApiException("Missing the required parameter 'endWeek' when calling getStatisticsDaily(Async)");
        }
        
        // verify the required parameter 'startMonth' is set
        if (startMonth == null) {
            throw new ApiException("Missing the required parameter 'startMonth' when calling getStatisticsDaily(Async)");
        }
        
        // verify the required parameter 'endMonth' is set
        if (endMonth == null) {
            throw new ApiException("Missing the required parameter 'endMonth' when calling getStatisticsDaily(Async)");
        }
        

        okhttp3.Call localVarCall = getStatisticsDailyCall(apiToken, startDate, endDate, startWeek, endWeek, startMonth, endMonth, announcementGroup, _callback);
        return localVarCall;

    }

    /**
     * Get statistics - daily
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startWeek  (required)
     * @param endWeek  (required)
     * @param startMonth  (required)
     * @param endMonth  (required)
     * @param announcementGroup  (optional)
     * @return GetStatisticsDailyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetStatisticsDailyResponse getStatisticsDaily(String apiToken, String startDate, String endDate, String startWeek, String endWeek, String startMonth, String endMonth, String announcementGroup) throws ApiException {
        ApiResponse<GetStatisticsDailyResponse> localVarResp = getStatisticsDailyWithHttpInfo(apiToken, startDate, endDate, startWeek, endWeek, startMonth, endMonth, announcementGroup);
        return localVarResp.getData();
    }

    /**
     * Get statistics - daily
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startWeek  (required)
     * @param endWeek  (required)
     * @param startMonth  (required)
     * @param endMonth  (required)
     * @param announcementGroup  (optional)
     * @return ApiResponse&lt;GetStatisticsDailyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatisticsDailyResponse> getStatisticsDailyWithHttpInfo(String apiToken, String startDate, String endDate, String startWeek, String endWeek, String startMonth, String endMonth, String announcementGroup) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsDailyValidateBeforeCall(apiToken, startDate, endDate, startWeek, endWeek, startMonth, endMonth, announcementGroup, null);
        Type localVarReturnType = new TypeToken<GetStatisticsDailyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get statistics - daily (asynchronously)
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param startWeek  (required)
     * @param endWeek  (required)
     * @param startMonth  (required)
     * @param endMonth  (required)
     * @param announcementGroup  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsDailyAsync(String apiToken, String startDate, String endDate, String startWeek, String endWeek, String startMonth, String endMonth, String announcementGroup, final ApiCallback<GetStatisticsDailyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsDailyValidateBeforeCall(apiToken, startDate, endDate, startWeek, endWeek, startMonth, endMonth, announcementGroup, _callback);
        Type localVarReturnType = new TypeToken<GetStatisticsDailyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatisticsMonthly
     * @param apiToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsMonthlyCall(String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/announcement_stats/monthly";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsMonthlyValidateBeforeCall(String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling getStatisticsMonthly(Async)");
        }
        

        okhttp3.Call localVarCall = getStatisticsMonthlyCall(apiToken, _callback);
        return localVarCall;

    }

    /**
     * Get statistics - monthly
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @return GetStatisticsMonthlyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetStatisticsMonthlyResponse getStatisticsMonthly(String apiToken) throws ApiException {
        ApiResponse<GetStatisticsMonthlyResponse> localVarResp = getStatisticsMonthlyWithHttpInfo(apiToken);
        return localVarResp.getData();
    }

    /**
     * Get statistics - monthly
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @return ApiResponse&lt;GetStatisticsMonthlyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatisticsMonthlyResponse> getStatisticsMonthlyWithHttpInfo(String apiToken) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsMonthlyValidateBeforeCall(apiToken, null);
        Type localVarReturnType = new TypeToken<GetStatisticsMonthlyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get statistics - monthly (asynchronously)
     * ## Get statistics  Retrieves the daily, weekly or monthly statistics of an announcement or an announcement group.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-statistics ----------------------------
     * @param apiToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsMonthlyAsync(String apiToken, final ApiCallback<GetStatisticsMonthlyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsMonthlyValidateBeforeCall(apiToken, _callback);
        Type localVarReturnType = new TypeToken<GetStatisticsMonthlyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllEmojisAndEmojiCategories
     * @param apiToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllEmojisAndEmojiCategoriesCall(String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/emoji_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllEmojisAndEmojiCategoriesValidateBeforeCall(String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listAllEmojisAndEmojiCategories(Async)");
        }
        

        okhttp3.Call localVarCall = listAllEmojisAndEmojiCategoriesCall(apiToken, _callback);
        return localVarCall;

    }

    /**
     * List all emojis and emoji categories
     * ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
     * @param apiToken  (required)
     * @return ListAllEmojisAndEmojiCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListAllEmojisAndEmojiCategoriesResponse listAllEmojisAndEmojiCategories(String apiToken) throws ApiException {
        ApiResponse<ListAllEmojisAndEmojiCategoriesResponse> localVarResp = listAllEmojisAndEmojiCategoriesWithHttpInfo(apiToken);
        return localVarResp.getData();
    }

    /**
     * List all emojis and emoji categories
     * ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
     * @param apiToken  (required)
     * @return ApiResponse&lt;ListAllEmojisAndEmojiCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllEmojisAndEmojiCategoriesResponse> listAllEmojisAndEmojiCategoriesWithHttpInfo(String apiToken) throws ApiException {
        okhttp3.Call localVarCall = listAllEmojisAndEmojiCategoriesValidateBeforeCall(apiToken, null);
        Type localVarReturnType = new TypeToken<ListAllEmojisAndEmojiCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all emojis and emoji categories (asynchronously)
     * ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
     * @param apiToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllEmojisAndEmojiCategoriesAsync(String apiToken, final ApiCallback<ListAllEmojisAndEmojiCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllEmojisAndEmojiCategoriesValidateBeforeCall(apiToken, _callback);
        Type localVarReturnType = new TypeToken<ListAllEmojisAndEmojiCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnnouncementGroups
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnnouncementGroupsCall(String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/announcement_group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnnouncementGroupsValidateBeforeCall(String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listAnnouncementGroups(Async)");
        }
        

        okhttp3.Call localVarCall = listAnnouncementGroupsCall(apiToken, token, limit, _callback);
        return localVarCall;

    }

    /**
     * List announcement groups
     * ## List announcement groups  Retrieves a list of announcement groups.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcement-groups ----------------------------
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @return ListAnnouncementGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListAnnouncementGroupsResponse listAnnouncementGroups(String apiToken, String token, Integer limit) throws ApiException {
        ApiResponse<ListAnnouncementGroupsResponse> localVarResp = listAnnouncementGroupsWithHttpInfo(apiToken, token, limit);
        return localVarResp.getData();
    }

    /**
     * List announcement groups
     * ## List announcement groups  Retrieves a list of announcement groups.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcement-groups ----------------------------
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;ListAnnouncementGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnnouncementGroupsResponse> listAnnouncementGroupsWithHttpInfo(String apiToken, String token, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAnnouncementGroupsValidateBeforeCall(apiToken, token, limit, null);
        Type localVarReturnType = new TypeToken<ListAnnouncementGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List announcement groups (asynchronously)
     * ## List announcement groups  Retrieves a list of announcement groups.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcement-groups ----------------------------
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnnouncementGroupsAsync(String apiToken, String token, Integer limit, final ApiCallback<ListAnnouncementGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnnouncementGroupsValidateBeforeCall(apiToken, token, limit, _callback);
        Type localVarReturnType = new TypeToken<ListAnnouncementGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAnnouncements
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param announcementGroup  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnnouncementsCall(String apiToken, String token, Integer limit, String order, String status, String announcementGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/announcements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (announcementGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("announcement_group", announcementGroup));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnnouncementsValidateBeforeCall(String apiToken, String token, Integer limit, String order, String status, String announcementGroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listAnnouncements(Async)");
        }
        

        okhttp3.Call localVarCall = listAnnouncementsCall(apiToken, token, limit, order, status, announcementGroup, _callback);
        return localVarCall;

    }

    /**
     * List announcements
     * ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements ----------------------------
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param announcementGroup  (optional)
     * @return ListAnnouncementsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListAnnouncementsResponse listAnnouncements(String apiToken, String token, Integer limit, String order, String status, String announcementGroup) throws ApiException {
        ApiResponse<ListAnnouncementsResponse> localVarResp = listAnnouncementsWithHttpInfo(apiToken, token, limit, order, status, announcementGroup);
        return localVarResp.getData();
    }

    /**
     * List announcements
     * ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements ----------------------------
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param announcementGroup  (optional)
     * @return ApiResponse&lt;ListAnnouncementsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAnnouncementsResponse> listAnnouncementsWithHttpInfo(String apiToken, String token, Integer limit, String order, String status, String announcementGroup) throws ApiException {
        okhttp3.Call localVarCall = listAnnouncementsValidateBeforeCall(apiToken, token, limit, order, status, announcementGroup, null);
        Type localVarReturnType = new TypeToken<ListAnnouncementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List announcements (asynchronously)
     * ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements ----------------------------
     * @param apiToken  (required)
     * @param token  (optional)
     * @param limit  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param announcementGroup  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAnnouncementsAsync(String apiToken, String token, Integer limit, String order, String status, String announcementGroup, final ApiCallback<ListAnnouncementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnnouncementsValidateBeforeCall(apiToken, token, limit, order, status, announcementGroup, _callback);
        Type localVarReturnType = new TypeToken<ListAnnouncementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEmojis
     * @param apiToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEmojisCall(String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/emojis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmojisValidateBeforeCall(String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listEmojis(Async)");
        }
        

        okhttp3.Call localVarCall = listEmojisCall(apiToken, _callback);
        return localVarCall;

    }

    /**
     * List emojis
     * ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
     * @param apiToken  (required)
     * @return ListEmojisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListEmojisResponse listEmojis(String apiToken) throws ApiException {
        ApiResponse<ListEmojisResponse> localVarResp = listEmojisWithHttpInfo(apiToken);
        return localVarResp.getData();
    }

    /**
     * List emojis
     * ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
     * @param apiToken  (required)
     * @return ApiResponse&lt;ListEmojisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEmojisResponse> listEmojisWithHttpInfo(String apiToken) throws ApiException {
        okhttp3.Call localVarCall = listEmojisValidateBeforeCall(apiToken, null);
        Type localVarReturnType = new TypeToken<ListEmojisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List emojis (asynchronously)
     * ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
     * @param apiToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEmojisAsync(String apiToken, final ApiCallback<ListEmojisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmojisValidateBeforeCall(apiToken, _callback);
        Type localVarReturnType = new TypeToken<ListEmojisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessages
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesCall(String apiToken, String channelType, String channelUrl, String messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (messageTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message_ts", messageTs));
        }

        if (messageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message_id", messageId));
        }

        if (prevLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prev_limit", prevLimit));
        }

        if (nextLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_limit", nextLimit));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reverse", reverse));
        }

        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_id", senderId));
        }

        if (senderIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_ids", senderIds));
        }

        if (operatorFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator_filter", operatorFilter));
        }

        if (customTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_types", customTypes));
        }

        if (messageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message_type", messageType));
        }

        if (includingRemoved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("including_removed", includingRemoved));
        }

        if (includeReactions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_reactions", includeReactions));
        }

        if (withSortedMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_sorted_meta_array", withSortedMetaArray));
        }

        if (showSubchannelMessagesOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_subchannel_messages_only", showSubchannelMessagesOnly));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (customType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_type", customType));
        }

        if (withMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_meta_array", withMetaArray));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagesValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listMessages(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling listMessages(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling listMessages(Async)");
        }
        

        okhttp3.Call localVarCall = listMessagesCall(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, _callback);
        return localVarCall;

    }

    /**
     * List messages
     * ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @return ListMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListMessagesResponse listMessages(String apiToken, String channelType, String channelUrl, String messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray) throws ApiException {
        ApiResponse<ListMessagesResponse> localVarResp = listMessagesWithHttpInfo(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray);
        return localVarResp.getData();
    }

    /**
     * List messages
     * ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @return ApiResponse&lt;ListMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessagesResponse> listMessagesWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray) throws ApiException {
        okhttp3.Call localVarCall = listMessagesValidateBeforeCall(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, null);
        Type localVarReturnType = new TypeToken<ListMessagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List messages (asynchronously)
     * ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesAsync(String apiToken, String channelType, String channelUrl, String messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray, final ApiCallback<ListMessagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagesValidateBeforeCall(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, _callback);
        Type localVarReturnType = new TypeToken<ListMessagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listReactionsOfMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReactionsOfMessageCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_users", listUsers));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReactionsOfMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listReactionsOfMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling listReactionsOfMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling listReactionsOfMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling listReactionsOfMessage(Async)");
        }
        

        okhttp3.Call localVarCall = listReactionsOfMessageCall(apiToken, channelType, channelUrl, messageId, listUsers, _callback);
        return localVarCall;

    }

    /**
     * List reactions of a message
     * ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @return ListReactionsOfMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListReactionsOfMessageResponse listReactionsOfMessage(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers) throws ApiException {
        ApiResponse<ListReactionsOfMessageResponse> localVarResp = listReactionsOfMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, listUsers);
        return localVarResp.getData();
    }

    /**
     * List reactions of a message
     * ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @return ApiResponse&lt;ListReactionsOfMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListReactionsOfMessageResponse> listReactionsOfMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers) throws ApiException {
        okhttp3.Call localVarCall = listReactionsOfMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, listUsers, null);
        Type localVarReturnType = new TypeToken<ListReactionsOfMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions of a message (asynchronously)
     * ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReactionsOfMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers, final ApiCallback<ListReactionsOfMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReactionsOfMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, listUsers, _callback);
        Type localVarReturnType = new TypeToken<ListReactionsOfMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrateMessagesByUrl
     * @param apiToken  (required)
     * @param targetChannelUrl  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrateMessagesByUrlCall(String apiToken, String targetChannelUrl, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v3/migration/{target_channel_url}"
            .replaceAll("\\{" + "target_channel_url" + "\\}", localVarApiClient.escapeString(targetChannelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrateMessagesByUrlValidateBeforeCall(String apiToken, String targetChannelUrl, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling migrateMessagesByUrl(Async)");
        }
        
        // verify the required parameter 'targetChannelUrl' is set
        if (targetChannelUrl == null) {
            throw new ApiException("Missing the required parameter 'targetChannelUrl' when calling migrateMessagesByUrl(Async)");
        }
        

        okhttp3.Call localVarCall = migrateMessagesByUrlCall(apiToken, targetChannelUrl, body, _callback);
        return localVarCall;

    }

    /**
     * Migrate messages
     * ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system&#39;s [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  &gt; To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn&#39;t create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages ----------------------------
     * @param apiToken  (required)
     * @param targetChannelUrl  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void migrateMessagesByUrl(String apiToken, String targetChannelUrl, Object body) throws ApiException {
        migrateMessagesByUrlWithHttpInfo(apiToken, targetChannelUrl, body);
    }

    /**
     * Migrate messages
     * ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system&#39;s [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  &gt; To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn&#39;t create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages ----------------------------
     * @param apiToken  (required)
     * @param targetChannelUrl  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> migrateMessagesByUrlWithHttpInfo(String apiToken, String targetChannelUrl, Object body) throws ApiException {
        okhttp3.Call localVarCall = migrateMessagesByUrlValidateBeforeCall(apiToken, targetChannelUrl, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Migrate messages (asynchronously)
     * ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system&#39;s [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  &gt; To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn&#39;t create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages ----------------------------
     * @param apiToken  (required)
     * @param targetChannelUrl  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrateMessagesByUrlAsync(String apiToken, String targetChannelUrl, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrateMessagesByUrlValidateBeforeCall(apiToken, targetChannelUrl, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeExtraDataFromMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeExtraDataFromMessageCall(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeExtraDataFromMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling removeExtraDataFromMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling removeExtraDataFromMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling removeExtraDataFromMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling removeExtraDataFromMessage(Async)");
        }
        

        okhttp3.Call localVarCall = removeExtraDataFromMessageCall(apiToken, channelType, channelUrl, messageId, keys, _callback);
        return localVarCall;

    }

    /**
     * Remove extra data from a message
     * ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Object removeExtraDataFromMessage(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys) throws ApiException {
        ApiResponse<Object> localVarResp = removeExtraDataFromMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, keys);
        return localVarResp.getData();
    }

    /**
     * Remove extra data from a message
     * ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeExtraDataFromMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = removeExtraDataFromMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, keys, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove extra data from a message (asynchronously)
     * ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeExtraDataFromMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeExtraDataFromMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, keys, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeReactionFromAMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeReactionFromAMessageCall(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (reaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reaction", reaction));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeReactionFromAMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling removeReactionFromAMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling removeReactionFromAMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling removeReactionFromAMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling removeReactionFromAMessage(Async)");
        }
        

        okhttp3.Call localVarCall = removeReactionFromAMessageCall(apiToken, channelType, channelUrl, messageId, userId, reaction, _callback);
        return localVarCall;

    }

    /**
     * Remove a reaction from a message
     * ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @return RemoveReactionFromAMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveReactionFromAMessageResponse removeReactionFromAMessage(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction) throws ApiException {
        ApiResponse<RemoveReactionFromAMessageResponse> localVarResp = removeReactionFromAMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, userId, reaction);
        return localVarResp.getData();
    }

    /**
     * Remove a reaction from a message
     * ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @return ApiResponse&lt;RemoveReactionFromAMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveReactionFromAMessageResponse> removeReactionFromAMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction) throws ApiException {
        okhttp3.Call localVarCall = removeReactionFromAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, userId, reaction, null);
        Type localVarReturnType = new TypeToken<RemoveReactionFromAMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a reaction from a message (asynchronously)
     * ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeReactionFromAMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction, final ApiCallback<RemoveReactionFromAMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeReactionFromAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, userId, reaction, _callback);
        Type localVarReturnType = new TypeToken<RemoveReactionFromAMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleAnnouncement
     * @param apiToken  (required)
     * @param scheduleAnnouncementData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleAnnouncementCall(String apiToken, ScheduleAnnouncementData scheduleAnnouncementData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleAnnouncementData;

        // create path and map variables
        String localVarPath = "/v3/announcements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleAnnouncementValidateBeforeCall(String apiToken, ScheduleAnnouncementData scheduleAnnouncementData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling scheduleAnnouncement(Async)");
        }
        

        okhttp3.Call localVarCall = scheduleAnnouncementCall(apiToken, scheduleAnnouncementData, _callback);
        return localVarCall;

    }

    /**
     * Schedule an announcement
     * ## Schedule an announcement  Schedules a new announcement. You can also schedule an announcement in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-schedule-an-announcement
     * @param apiToken  (required)
     * @param scheduleAnnouncementData  (optional)
     * @return ScheduleAnnouncementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleAnnouncementResponse scheduleAnnouncement(String apiToken, ScheduleAnnouncementData scheduleAnnouncementData) throws ApiException {
        ApiResponse<ScheduleAnnouncementResponse> localVarResp = scheduleAnnouncementWithHttpInfo(apiToken, scheduleAnnouncementData);
        return localVarResp.getData();
    }

    /**
     * Schedule an announcement
     * ## Schedule an announcement  Schedules a new announcement. You can also schedule an announcement in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-schedule-an-announcement
     * @param apiToken  (required)
     * @param scheduleAnnouncementData  (optional)
     * @return ApiResponse&lt;ScheduleAnnouncementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleAnnouncementResponse> scheduleAnnouncementWithHttpInfo(String apiToken, ScheduleAnnouncementData scheduleAnnouncementData) throws ApiException {
        okhttp3.Call localVarCall = scheduleAnnouncementValidateBeforeCall(apiToken, scheduleAnnouncementData, null);
        Type localVarReturnType = new TypeToken<ScheduleAnnouncementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Schedule an announcement (asynchronously)
     * ## Schedule an announcement  Schedules a new announcement. You can also schedule an announcement in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-schedule-an-announcement
     * @param apiToken  (required)
     * @param scheduleAnnouncementData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleAnnouncementAsync(String apiToken, ScheduleAnnouncementData scheduleAnnouncementData, final ApiCallback<ScheduleAnnouncementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleAnnouncementValidateBeforeCall(apiToken, scheduleAnnouncementData, _callback);
        Type localVarReturnType = new TypeToken<ScheduleAnnouncementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageCall(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling sendMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling sendMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling sendMessage(Async)");
        }
        

        okhttp3.Call localVarCall = sendMessageCall(apiToken, channelType, channelUrl, sendMessageData, _callback);
        return localVarCall;

    }

    /**
     * Send a message
     * ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse sendMessage(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = sendMessageWithHttpInfo(apiToken, channelType, channelUrl, sendMessageData);
        return localVarResp.getData();
    }

    /**
     * Send a message
     * ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> sendMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(apiToken, channelType, channelUrl, sendMessageData, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a message (asynchronously)
     * ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageAsync(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(apiToken, channelType, channelUrl, sendMessageData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateMessageIntoOtherLanguages
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param translateMessageIntoOtherLanguagesData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateMessageIntoOtherLanguagesCall(String apiToken, String channelType, String channelUrl, String messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translateMessageIntoOtherLanguagesData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/translation"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateMessageIntoOtherLanguagesValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling translateMessageIntoOtherLanguages(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling translateMessageIntoOtherLanguages(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling translateMessageIntoOtherLanguages(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling translateMessageIntoOtherLanguages(Async)");
        }
        

        okhttp3.Call localVarCall = translateMessageIntoOtherLanguagesCall(apiToken, channelType, channelUrl, messageId, translateMessageIntoOtherLanguagesData, _callback);
        return localVarCall;

    }

    /**
     * Translate a message into other languages
     * ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param translateMessageIntoOtherLanguagesData  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse translateMessageIntoOtherLanguages(String apiToken, String channelType, String channelUrl, String messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = translateMessageIntoOtherLanguagesWithHttpInfo(apiToken, channelType, channelUrl, messageId, translateMessageIntoOtherLanguagesData);
        return localVarResp.getData();
    }

    /**
     * Translate a message into other languages
     * ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param translateMessageIntoOtherLanguagesData  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> translateMessageIntoOtherLanguagesWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData) throws ApiException {
        okhttp3.Call localVarCall = translateMessageIntoOtherLanguagesValidateBeforeCall(apiToken, channelType, channelUrl, messageId, translateMessageIntoOtherLanguagesData, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate a message into other languages (asynchronously)
     * ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param translateMessageIntoOtherLanguagesData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateMessageIntoOtherLanguagesAsync(String apiToken, String channelType, String channelUrl, String messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateMessageIntoOtherLanguagesValidateBeforeCall(apiToken, channelType, channelUrl, messageId, translateMessageIntoOtherLanguagesData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnnouncementById
     * @param apiToken  (required)
     * @param uniqueId  (required)
     * @param updateAnnouncementByIdData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnnouncementByIdCall(String apiToken, String uniqueId, UpdateAnnouncementByIdData updateAnnouncementByIdData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnnouncementByIdData;

        // create path and map variables
        String localVarPath = "/v3/announcements/{unique_id}"
            .replaceAll("\\{" + "unique_id" + "\\}", localVarApiClient.escapeString(uniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnnouncementByIdValidateBeforeCall(String apiToken, String uniqueId, UpdateAnnouncementByIdData updateAnnouncementByIdData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling updateAnnouncementById(Async)");
        }
        
        // verify the required parameter 'uniqueId' is set
        if (uniqueId == null) {
            throw new ApiException("Missing the required parameter 'uniqueId' when calling updateAnnouncementById(Async)");
        }
        

        okhttp3.Call localVarCall = updateAnnouncementByIdCall(apiToken, uniqueId, updateAnnouncementByIdData, _callback);
        return localVarCall;

    }

    /**
     * Update an announcement
     * ## Update an announcement  Updates information of a specific announcement before it starts or changes the status of a specific announcement after it starts. For the 2 different applications, refer to the request body below.  &gt;__Note__: Updating information of an announcement is possible only when the announcement status is scheduled, indicating it hasn&#39;t started yet.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-update-an-announcement ----------------------------
     * @param apiToken  (required)
     * @param uniqueId  (required)
     * @param updateAnnouncementByIdData  (optional)
     * @return UpdateAnnouncementByIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAnnouncementByIdResponse updateAnnouncementById(String apiToken, String uniqueId, UpdateAnnouncementByIdData updateAnnouncementByIdData) throws ApiException {
        ApiResponse<UpdateAnnouncementByIdResponse> localVarResp = updateAnnouncementByIdWithHttpInfo(apiToken, uniqueId, updateAnnouncementByIdData);
        return localVarResp.getData();
    }

    /**
     * Update an announcement
     * ## Update an announcement  Updates information of a specific announcement before it starts or changes the status of a specific announcement after it starts. For the 2 different applications, refer to the request body below.  &gt;__Note__: Updating information of an announcement is possible only when the announcement status is scheduled, indicating it hasn&#39;t started yet.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-update-an-announcement ----------------------------
     * @param apiToken  (required)
     * @param uniqueId  (required)
     * @param updateAnnouncementByIdData  (optional)
     * @return ApiResponse&lt;UpdateAnnouncementByIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAnnouncementByIdResponse> updateAnnouncementByIdWithHttpInfo(String apiToken, String uniqueId, UpdateAnnouncementByIdData updateAnnouncementByIdData) throws ApiException {
        okhttp3.Call localVarCall = updateAnnouncementByIdValidateBeforeCall(apiToken, uniqueId, updateAnnouncementByIdData, null);
        Type localVarReturnType = new TypeToken<UpdateAnnouncementByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an announcement (asynchronously)
     * ## Update an announcement  Updates information of a specific announcement before it starts or changes the status of a specific announcement after it starts. For the 2 different applications, refer to the request body below.  &gt;__Note__: Updating information of an announcement is possible only when the announcement status is scheduled, indicating it hasn&#39;t started yet.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-update-an-announcement ----------------------------
     * @param apiToken  (required)
     * @param uniqueId  (required)
     * @param updateAnnouncementByIdData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnnouncementByIdAsync(String apiToken, String uniqueId, UpdateAnnouncementByIdData updateAnnouncementByIdData, final ApiCallback<UpdateAnnouncementByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnnouncementByIdValidateBeforeCall(apiToken, uniqueId, updateAnnouncementByIdData, _callback);
        Type localVarReturnType = new TypeToken<UpdateAnnouncementByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmojiCategoryUrlById
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param updateEmojiCategoryUrlByIdData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmojiCategoryUrlByIdCall(String apiToken, String emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmojiCategoryUrlByIdData;

        // create path and map variables
        String localVarPath = "/v3/emoji_categories/{emoji_category_id}"
            .replaceAll("\\{" + "emoji_category_id" + "\\}", localVarApiClient.escapeString(emojiCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmojiCategoryUrlByIdValidateBeforeCall(String apiToken, String emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling updateEmojiCategoryUrlById(Async)");
        }
        
        // verify the required parameter 'emojiCategoryId' is set
        if (emojiCategoryId == null) {
            throw new ApiException("Missing the required parameter 'emojiCategoryId' when calling updateEmojiCategoryUrlById(Async)");
        }
        

        okhttp3.Call localVarCall = updateEmojiCategoryUrlByIdCall(apiToken, emojiCategoryId, updateEmojiCategoryUrlByIdData, _callback);
        return localVarCall;

    }

    /**
     * Update an emoji category URL
     * ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url ----------------------------
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param updateEmojiCategoryUrlByIdData  (optional)
     * @return SendBirdEmojiCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdEmojiCategory updateEmojiCategoryUrlById(String apiToken, String emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData) throws ApiException {
        ApiResponse<SendBirdEmojiCategory> localVarResp = updateEmojiCategoryUrlByIdWithHttpInfo(apiToken, emojiCategoryId, updateEmojiCategoryUrlByIdData);
        return localVarResp.getData();
    }

    /**
     * Update an emoji category URL
     * ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url ----------------------------
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param updateEmojiCategoryUrlByIdData  (optional)
     * @return ApiResponse&lt;SendBirdEmojiCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdEmojiCategory> updateEmojiCategoryUrlByIdWithHttpInfo(String apiToken, String emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData) throws ApiException {
        okhttp3.Call localVarCall = updateEmojiCategoryUrlByIdValidateBeforeCall(apiToken, emojiCategoryId, updateEmojiCategoryUrlByIdData, null);
        Type localVarReturnType = new TypeToken<SendBirdEmojiCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an emoji category URL (asynchronously)
     * ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url ----------------------------
     * @param apiToken  (required)
     * @param emojiCategoryId  (required)
     * @param updateEmojiCategoryUrlByIdData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmojiCategoryUrlByIdAsync(String apiToken, String emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData, final ApiCallback<SendBirdEmojiCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmojiCategoryUrlByIdValidateBeforeCall(apiToken, emojiCategoryId, updateEmojiCategoryUrlByIdData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdEmojiCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmojiUrlByKey
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param updateEmojiUrlByKeyData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmojiUrlByKeyCall(String apiToken, String emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmojiUrlByKeyData;

        // create path and map variables
        String localVarPath = "/v3/emojis/{emoji_key}"
            .replaceAll("\\{" + "emoji_key" + "\\}", localVarApiClient.escapeString(emojiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmojiUrlByKeyValidateBeforeCall(String apiToken, String emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling updateEmojiUrlByKey(Async)");
        }
        
        // verify the required parameter 'emojiKey' is set
        if (emojiKey == null) {
            throw new ApiException("Missing the required parameter 'emojiKey' when calling updateEmojiUrlByKey(Async)");
        }
        

        okhttp3.Call localVarCall = updateEmojiUrlByKeyCall(apiToken, emojiKey, updateEmojiUrlByKeyData, _callback);
        return localVarCall;

    }

    /**
     * Update an emoji URL
     * ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param updateEmojiUrlByKeyData  (optional)
     * @return SendBirdEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdEmoji updateEmojiUrlByKey(String apiToken, String emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData) throws ApiException {
        ApiResponse<SendBirdEmoji> localVarResp = updateEmojiUrlByKeyWithHttpInfo(apiToken, emojiKey, updateEmojiUrlByKeyData);
        return localVarResp.getData();
    }

    /**
     * Update an emoji URL
     * ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param updateEmojiUrlByKeyData  (optional)
     * @return ApiResponse&lt;SendBirdEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdEmoji> updateEmojiUrlByKeyWithHttpInfo(String apiToken, String emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData) throws ApiException {
        okhttp3.Call localVarCall = updateEmojiUrlByKeyValidateBeforeCall(apiToken, emojiKey, updateEmojiUrlByKeyData, null);
        Type localVarReturnType = new TypeToken<SendBirdEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an emoji URL (asynchronously)
     * ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url ----------------------------
     * @param apiToken  (required)
     * @param emojiKey  (required)
     * @param updateEmojiUrlByKeyData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmojiUrlByKeyAsync(String apiToken, String emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData, final ApiCallback<SendBirdEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmojiUrlByKeyValidateBeforeCall(apiToken, emojiKey, updateEmojiUrlByKeyData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtraDataInMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraDataInMessageCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExtraDataInMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtraDataInMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling updateExtraDataInMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling updateExtraDataInMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling updateExtraDataInMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateExtraDataInMessage(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtraDataInMessageCall(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData, _callback);
        return localVarCall;

    }

    /**
     * Update extra data in a message
     * ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @return UpdateExtraDataInMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExtraDataInMessageResponse updateExtraDataInMessage(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData) throws ApiException {
        ApiResponse<UpdateExtraDataInMessageResponse> localVarResp = updateExtraDataInMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData);
        return localVarResp.getData();
    }

    /**
     * Update extra data in a message
     * ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @return ApiResponse&lt;UpdateExtraDataInMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateExtraDataInMessageResponse> updateExtraDataInMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData) throws ApiException {
        okhttp3.Call localVarCall = updateExtraDataInMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData, null);
        Type localVarReturnType = new TypeToken<UpdateExtraDataInMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update extra data in a message (asynchronously)
     * ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraDataInMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData, final ApiCallback<UpdateExtraDataInMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtraDataInMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData, _callback);
        Type localVarReturnType = new TypeToken<UpdateExtraDataInMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessageById
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageByIdCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMessageByIdData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageByIdValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling updateMessageById(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling updateMessageById(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling updateMessageById(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessageById(Async)");
        }
        

        okhttp3.Call localVarCall = updateMessageByIdCall(apiToken, channelType, channelUrl, messageId, updateMessageByIdData, _callback);
        return localVarCall;

    }

    /**
     * Update a message
     * ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse updateMessageById(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = updateMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, updateMessageByIdData);
        return localVarResp.getData();
    }

    /**
     * Update a message
     * ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> updateMessageByIdWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData) throws ApiException {
        okhttp3.Call localVarCall = updateMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateMessageByIdData, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a message (asynchronously)
     * ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageByIdAsync(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateMessageByIdData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for useDefaultEmojis
     * @param apiToken  (required)
     * @param useDefaultEmojisData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useDefaultEmojisCall(String apiToken, UseDefaultEmojisData useDefaultEmojisData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = useDefaultEmojisData;

        // create path and map variables
        String localVarPath = "/v3/applications/settings/use_default_emoji";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call useDefaultEmojisValidateBeforeCall(String apiToken, UseDefaultEmojisData useDefaultEmojisData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling useDefaultEmojis(Async)");
        }
        

        okhttp3.Call localVarCall = useDefaultEmojisCall(apiToken, useDefaultEmojisData, _callback);
        return localVarCall;

    }

    /**
     * Use default emojis
     * ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
     * @param apiToken  (required)
     * @param useDefaultEmojisData  (optional)
     * @return UseDefaultEmojisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UseDefaultEmojisResponse useDefaultEmojis(String apiToken, UseDefaultEmojisData useDefaultEmojisData) throws ApiException {
        ApiResponse<UseDefaultEmojisResponse> localVarResp = useDefaultEmojisWithHttpInfo(apiToken, useDefaultEmojisData);
        return localVarResp.getData();
    }

    /**
     * Use default emojis
     * ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
     * @param apiToken  (required)
     * @param useDefaultEmojisData  (optional)
     * @return ApiResponse&lt;UseDefaultEmojisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UseDefaultEmojisResponse> useDefaultEmojisWithHttpInfo(String apiToken, UseDefaultEmojisData useDefaultEmojisData) throws ApiException {
        okhttp3.Call localVarCall = useDefaultEmojisValidateBeforeCall(apiToken, useDefaultEmojisData, null);
        Type localVarReturnType = new TypeToken<UseDefaultEmojisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use default emojis (asynchronously)
     * ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
     * @param apiToken  (required)
     * @param useDefaultEmojisData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useDefaultEmojisAsync(String apiToken, UseDefaultEmojisData useDefaultEmojisData, final ApiCallback<UseDefaultEmojisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = useDefaultEmojisValidateBeforeCall(apiToken, useDefaultEmojisData, _callback);
        Type localVarReturnType = new TypeToken<UseDefaultEmojisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewMessageById
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewMessageByIdCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withSortedMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_sorted_meta_array", withSortedMetaArray));
        }

        if (withMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_meta_array", withMetaArray));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewMessageByIdValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewMessageById(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewMessageById(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewMessageById(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling viewMessageById(Async)");
        }
        

        okhttp3.Call localVarCall = viewMessageByIdCall(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray, _callback);
        return localVarCall;

    }

    /**
     * View a message
     * ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse viewMessageById(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = viewMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray);
        return localVarResp.getData();
    }

    /**
     * View a message
     * ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> viewMessageByIdWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray) throws ApiException {
        okhttp3.Call localVarCall = viewMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a message (asynchronously)
     * ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewMessageByIdAsync(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewTotalNumberOfMessagesInChannel
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewTotalNumberOfMessagesInChannelCall(String apiToken, String channelType, String channelUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewTotalNumberOfMessagesInChannelValidateBeforeCall(String apiToken, String channelType, String channelUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewTotalNumberOfMessagesInChannel(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewTotalNumberOfMessagesInChannel(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewTotalNumberOfMessagesInChannel(Async)");
        }
        

        okhttp3.Call localVarCall = viewTotalNumberOfMessagesInChannelCall(apiToken, channelType, channelUrl, _callback);
        return localVarCall;

    }

    /**
     * View total number of messages in a channel
     * ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @return ViewTotalNumberOfMessagesInChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ViewTotalNumberOfMessagesInChannelResponse viewTotalNumberOfMessagesInChannel(String apiToken, String channelType, String channelUrl) throws ApiException {
        ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> localVarResp = viewTotalNumberOfMessagesInChannelWithHttpInfo(apiToken, channelType, channelUrl);
        return localVarResp.getData();
    }

    /**
     * View total number of messages in a channel
     * ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @return ApiResponse&lt;ViewTotalNumberOfMessagesInChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> viewTotalNumberOfMessagesInChannelWithHttpInfo(String apiToken, String channelType, String channelUrl) throws ApiException {
        okhttp3.Call localVarCall = viewTotalNumberOfMessagesInChannelValidateBeforeCall(apiToken, channelType, channelUrl, null);
        Type localVarReturnType = new TypeToken<ViewTotalNumberOfMessagesInChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View total number of messages in a channel (asynchronously)
     * ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewTotalNumberOfMessagesInChannelAsync(String apiToken, String channelType, String channelUrl, final ApiCallback<ViewTotalNumberOfMessagesInChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewTotalNumberOfMessagesInChannelValidateBeforeCall(apiToken, channelType, channelUrl, _callback);
        Type localVarReturnType = new TypeToken<ViewTotalNumberOfMessagesInChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
