/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.sendbird.client.api;

import org.sendbird.client.ApiCallback;
import org.sendbird.client.ApiClient;
import org.sendbird.client.ApiException;
import org.sendbird.client.ApiResponse;
import org.sendbird.client.Configuration;
import org.sendbird.client.Pair;
import org.sendbird.client.ProgressRequestBody;
import org.sendbird.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddExtraDataToMessageData;
import org.openapitools.client.model.AddExtraDataToMessageResponse;
import org.openapitools.client.model.AddReactionToAMessageData;
import org.openapitools.client.model.AddReactionToAMessageResponse;
import org.openapitools.client.model.GcMarkAllMessagesAsDeliveredData;
import org.openapitools.client.model.GcMarkAllMessagesAsDeliveredResponse;
import org.openapitools.client.model.GcMarkAllMessagesAsReadData;
import org.openapitools.client.model.GcViewNumberOfEachMembersUnreadMessagesResponse;
import org.openapitools.client.model.ListMessagesResponse;
import org.openapitools.client.model.ListReactionsOfMessageResponse;
import org.openapitools.client.model.RemoveReactionFromAMessageResponse;
import org.openapitools.client.model.SendBirdMessageResponse;
import org.openapitools.client.model.SendMessageData;
import org.openapitools.client.model.UpdateExtraDataInMessageData;
import org.openapitools.client.model.UpdateExtraDataInMessageResponse;
import org.openapitools.client.model.UpdateMessageByIdData;
import org.openapitools.client.model.ViewTotalNumberOfMessagesInChannelResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addExtraDataToMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraDataToMessageCall(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addExtraDataToMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExtraDataToMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling addExtraDataToMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling addExtraDataToMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling addExtraDataToMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling addExtraDataToMessage(Async)");
        }
        

        okhttp3.Call localVarCall = addExtraDataToMessageCall(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData, _callback);
        return localVarCall;

    }

    /**
     * Add extra data to a message
     * ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @return AddExtraDataToMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AddExtraDataToMessageResponse addExtraDataToMessage(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData) throws ApiException {
        ApiResponse<AddExtraDataToMessageResponse> localVarResp = addExtraDataToMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData);
        return localVarResp.getData();
    }

    /**
     * Add extra data to a message
     * ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @return ApiResponse&lt;AddExtraDataToMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddExtraDataToMessageResponse> addExtraDataToMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData) throws ApiException {
        okhttp3.Call localVarCall = addExtraDataToMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData, null);
        Type localVarReturnType = new TypeToken<AddExtraDataToMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add extra data to a message (asynchronously)
     * ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addExtraDataToMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraDataToMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, AddExtraDataToMessageData addExtraDataToMessageData, final ApiCallback<AddExtraDataToMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExtraDataToMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData, _callback);
        Type localVarReturnType = new TypeToken<AddExtraDataToMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addReactionToAMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addReactionToAMessageCall(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addReactionToAMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addReactionToAMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling addReactionToAMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling addReactionToAMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling addReactionToAMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling addReactionToAMessage(Async)");
        }
        

        okhttp3.Call localVarCall = addReactionToAMessageCall(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData, _callback);
        return localVarCall;

    }

    /**
     * Add a reaction to a message
     * ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @return AddReactionToAMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AddReactionToAMessageResponse addReactionToAMessage(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData) throws ApiException {
        ApiResponse<AddReactionToAMessageResponse> localVarResp = addReactionToAMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData);
        return localVarResp.getData();
    }

    /**
     * Add a reaction to a message
     * ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @return ApiResponse&lt;AddReactionToAMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddReactionToAMessageResponse> addReactionToAMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData) throws ApiException {
        okhttp3.Call localVarCall = addReactionToAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData, null);
        Type localVarReturnType = new TypeToken<AddReactionToAMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a reaction to a message (asynchronously)
     * ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param addReactionToAMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addReactionToAMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, AddReactionToAMessageData addReactionToAMessageData, final ApiCallback<AddReactionToAMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addReactionToAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData, _callback);
        Type localVarReturnType = new TypeToken<AddReactionToAMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessageById
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageByIdCall(String apiToken, String channelType, String channelUrl, String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageByIdValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling deleteMessageById(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling deleteMessageById(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling deleteMessageById(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMessageById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMessageByIdCall(apiToken, channelType, channelUrl, messageId, _callback);
        return localVarCall;

    }

    /**
     * Delete a message
     * ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMessageById(String apiToken, String channelType, String channelUrl, String messageId) throws ApiException {
        deleteMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId);
    }

    /**
     * Delete a message
     * ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMessageByIdWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a message (asynchronously)
     * ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageByIdAsync(String apiToken, String channelType, String channelUrl, String messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcMarkAllMessagesAsDelivered
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsDeliveredCall(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcMarkAllMessagesAsDeliveredData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_delivered"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcMarkAllMessagesAsDeliveredValidateBeforeCall(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling gcMarkAllMessagesAsDelivered(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcMarkAllMessagesAsDelivered(Async)");
        }
        

        okhttp3.Call localVarCall = gcMarkAllMessagesAsDeliveredCall(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData, _callback);
        return localVarCall;

    }

    /**
     * Mark all messages as delivered
     * ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @return GcMarkAllMessagesAsDeliveredResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GcMarkAllMessagesAsDeliveredResponse gcMarkAllMessagesAsDelivered(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData) throws ApiException {
        ApiResponse<GcMarkAllMessagesAsDeliveredResponse> localVarResp = gcMarkAllMessagesAsDeliveredWithHttpInfo(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData);
        return localVarResp.getData();
    }

    /**
     * Mark all messages as delivered
     * ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @return ApiResponse&lt;GcMarkAllMessagesAsDeliveredResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GcMarkAllMessagesAsDeliveredResponse> gcMarkAllMessagesAsDeliveredWithHttpInfo(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData) throws ApiException {
        okhttp3.Call localVarCall = gcMarkAllMessagesAsDeliveredValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData, null);
        Type localVarReturnType = new TypeToken<GcMarkAllMessagesAsDeliveredResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark all messages as delivered (asynchronously)
     * ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsDeliveredData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsDeliveredAsync(String apiToken, String channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData, final ApiCallback<GcMarkAllMessagesAsDeliveredResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcMarkAllMessagesAsDeliveredValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData, _callback);
        Type localVarReturnType = new TypeToken<GcMarkAllMessagesAsDeliveredResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcMarkAllMessagesAsRead
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsReadCall(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcMarkAllMessagesAsReadData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcMarkAllMessagesAsReadValidateBeforeCall(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling gcMarkAllMessagesAsRead(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcMarkAllMessagesAsRead(Async)");
        }
        

        okhttp3.Call localVarCall = gcMarkAllMessagesAsReadCall(apiToken, channelUrl, gcMarkAllMessagesAsReadData, _callback);
        return localVarCall;

    }

    /**
     * Mark all messages as read
     * ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcMarkAllMessagesAsRead(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData) throws ApiException {
        gcMarkAllMessagesAsReadWithHttpInfo(apiToken, channelUrl, gcMarkAllMessagesAsReadData);
    }

    /**
     * Mark all messages as read
     * ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcMarkAllMessagesAsReadWithHttpInfo(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData) throws ApiException {
        okhttp3.Call localVarCall = gcMarkAllMessagesAsReadValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsReadData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark all messages as read (asynchronously)
     * ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param gcMarkAllMessagesAsReadData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMarkAllMessagesAsReadAsync(String apiToken, String channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcMarkAllMessagesAsReadValidateBeforeCall(apiToken, channelUrl, gcMarkAllMessagesAsReadData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcViewNumberOfEachMembersUnreadMessages
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewNumberOfEachMembersUnreadMessagesCall(String apiToken, String channelUrl, String userIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/messages/unread_count"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_ids", userIds));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcViewNumberOfEachMembersUnreadMessagesValidateBeforeCall(String apiToken, String channelUrl, String userIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling gcViewNumberOfEachMembersUnreadMessages(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcViewNumberOfEachMembersUnreadMessages(Async)");
        }
        

        okhttp3.Call localVarCall = gcViewNumberOfEachMembersUnreadMessagesCall(apiToken, channelUrl, userIds, _callback);
        return localVarCall;

    }

    /**
     * View number of each member&#39;s unread messages
     * ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @return GcViewNumberOfEachMembersUnreadMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GcViewNumberOfEachMembersUnreadMessagesResponse gcViewNumberOfEachMembersUnreadMessages(String apiToken, String channelUrl, String userIds) throws ApiException {
        ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> localVarResp = gcViewNumberOfEachMembersUnreadMessagesWithHttpInfo(apiToken, channelUrl, userIds);
        return localVarResp.getData();
    }

    /**
     * View number of each member&#39;s unread messages
     * ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @return ApiResponse&lt;GcViewNumberOfEachMembersUnreadMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> gcViewNumberOfEachMembersUnreadMessagesWithHttpInfo(String apiToken, String channelUrl, String userIds) throws ApiException {
        okhttp3.Call localVarCall = gcViewNumberOfEachMembersUnreadMessagesValidateBeforeCall(apiToken, channelUrl, userIds, null);
        Type localVarReturnType = new TypeToken<GcViewNumberOfEachMembersUnreadMessagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View number of each member&#39;s unread messages (asynchronously)
     * ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages ----------------------------
     * @param apiToken  (required)
     * @param channelUrl  (required)
     * @param userIds  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewNumberOfEachMembersUnreadMessagesAsync(String apiToken, String channelUrl, String userIds, final ApiCallback<GcViewNumberOfEachMembersUnreadMessagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcViewNumberOfEachMembersUnreadMessagesValidateBeforeCall(apiToken, channelUrl, userIds, _callback);
        Type localVarReturnType = new TypeToken<GcViewNumberOfEachMembersUnreadMessagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessages
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesCall(String apiToken, String channelType, String channelUrl, Integer messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (messageTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message_ts", messageTs));
        }

        if (messageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message_id", messageId));
        }

        if (prevLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prev_limit", prevLimit));
        }

        if (nextLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_limit", nextLimit));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reverse", reverse));
        }

        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_id", senderId));
        }

        if (senderIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sender_ids", senderIds));
        }

        if (operatorFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator_filter", operatorFilter));
        }

        if (customTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_types", customTypes));
        }

        if (messageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message_type", messageType));
        }

        if (includingRemoved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("including_removed", includingRemoved));
        }

        if (includeReactions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_reactions", includeReactions));
        }

        if (withSortedMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_sorted_meta_array", withSortedMetaArray));
        }

        if (showSubchannelMessagesOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_subchannel_messages_only", showSubchannelMessagesOnly));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (customType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_type", customType));
        }

        if (withMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_meta_array", withMetaArray));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagesValidateBeforeCall(String apiToken, String channelType, String channelUrl, Integer messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listMessages(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling listMessages(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling listMessages(Async)");
        }
        

        okhttp3.Call localVarCall = listMessagesCall(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, _callback);
        return localVarCall;

    }

    /**
     * List messages
     * ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @return ListMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListMessagesResponse listMessages(String apiToken, String channelType, String channelUrl, Integer messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray) throws ApiException {
        ApiResponse<ListMessagesResponse> localVarResp = listMessagesWithHttpInfo(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray);
        return localVarResp.getData();
    }

    /**
     * List messages
     * ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @return ApiResponse&lt;ListMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessagesResponse> listMessagesWithHttpInfo(String apiToken, String channelType, String channelUrl, Integer messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray) throws ApiException {
        okhttp3.Call localVarCall = listMessagesValidateBeforeCall(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, null);
        Type localVarReturnType = new TypeToken<ListMessagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List messages (asynchronously)
     * ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageTs  (optional)
     * @param messageId  (optional)
     * @param prevLimit  (optional)
     * @param nextLimit  (optional)
     * @param include  (optional)
     * @param reverse  (optional)
     * @param senderId  (optional)
     * @param senderIds  (optional)
     * @param operatorFilter  (optional)
     * @param customTypes  (optional)
     * @param messageType  (optional)
     * @param includingRemoved  (optional)
     * @param includeReactions  (optional)
     * @param withSortedMetaArray  (optional)
     * @param showSubchannelMessagesOnly  (optional)
     * @param userId  (optional)
     * @param customType  (optional)
     * @param withMetaArray  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesAsync(String apiToken, String channelType, String channelUrl, Integer messageTs, Integer messageId, Integer prevLimit, Integer nextLimit, Boolean include, Boolean reverse, String senderId, String senderIds, String operatorFilter, String customTypes, String messageType, Boolean includingRemoved, Boolean includeReactions, Boolean withSortedMetaArray, Boolean showSubchannelMessagesOnly, String userId, String customType, Boolean withMetaArray, final ApiCallback<ListMessagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagesValidateBeforeCall(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, _callback);
        Type localVarReturnType = new TypeToken<ListMessagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listReactionsOfMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReactionsOfMessageCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_users", listUsers));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReactionsOfMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling listReactionsOfMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling listReactionsOfMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling listReactionsOfMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling listReactionsOfMessage(Async)");
        }
        

        okhttp3.Call localVarCall = listReactionsOfMessageCall(apiToken, channelType, channelUrl, messageId, listUsers, _callback);
        return localVarCall;

    }

    /**
     * List reactions of a message
     * ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @return ListReactionsOfMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListReactionsOfMessageResponse listReactionsOfMessage(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers) throws ApiException {
        ApiResponse<ListReactionsOfMessageResponse> localVarResp = listReactionsOfMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, listUsers);
        return localVarResp.getData();
    }

    /**
     * List reactions of a message
     * ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @return ApiResponse&lt;ListReactionsOfMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListReactionsOfMessageResponse> listReactionsOfMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers) throws ApiException {
        okhttp3.Call localVarCall = listReactionsOfMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, listUsers, null);
        Type localVarReturnType = new TypeToken<ListReactionsOfMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions of a message (asynchronously)
     * ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param listUsers  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReactionsOfMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, Boolean listUsers, final ApiCallback<ListReactionsOfMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReactionsOfMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, listUsers, _callback);
        Type localVarReturnType = new TypeToken<ListReactionsOfMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeExtraDataFromMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeExtraDataFromMessageCall(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeExtraDataFromMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling removeExtraDataFromMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling removeExtraDataFromMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling removeExtraDataFromMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling removeExtraDataFromMessage(Async)");
        }
        

        okhttp3.Call localVarCall = removeExtraDataFromMessageCall(apiToken, channelType, channelUrl, messageId, keys, _callback);
        return localVarCall;

    }

    /**
     * Remove extra data from a message
     * ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void removeExtraDataFromMessage(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys) throws ApiException {
        removeExtraDataFromMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, keys);
    }

    /**
     * Remove extra data from a message
     * ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeExtraDataFromMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = removeExtraDataFromMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, keys, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove extra data from a message (asynchronously)
     * ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param keys  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeExtraDataFromMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, List<String> keys, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeExtraDataFromMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, keys, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeReactionFromAMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeReactionFromAMessageCall(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (reaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reaction", reaction));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeReactionFromAMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling removeReactionFromAMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling removeReactionFromAMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling removeReactionFromAMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling removeReactionFromAMessage(Async)");
        }
        

        okhttp3.Call localVarCall = removeReactionFromAMessageCall(apiToken, channelType, channelUrl, messageId, userId, reaction, _callback);
        return localVarCall;

    }

    /**
     * Remove a reaction from a message
     * ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @return RemoveReactionFromAMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveReactionFromAMessageResponse removeReactionFromAMessage(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction) throws ApiException {
        ApiResponse<RemoveReactionFromAMessageResponse> localVarResp = removeReactionFromAMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, userId, reaction);
        return localVarResp.getData();
    }

    /**
     * Remove a reaction from a message
     * ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @return ApiResponse&lt;RemoveReactionFromAMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveReactionFromAMessageResponse> removeReactionFromAMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction) throws ApiException {
        okhttp3.Call localVarCall = removeReactionFromAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, userId, reaction, null);
        Type localVarReturnType = new TypeToken<RemoveReactionFromAMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a reaction from a message (asynchronously)
     * ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param userId  (optional)
     * @param reaction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeReactionFromAMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, String userId, String reaction, final ApiCallback<RemoveReactionFromAMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeReactionFromAMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, userId, reaction, _callback);
        Type localVarReturnType = new TypeToken<RemoveReactionFromAMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageCall(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling sendMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling sendMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling sendMessage(Async)");
        }
        

        okhttp3.Call localVarCall = sendMessageCall(apiToken, channelType, channelUrl, sendMessageData, _callback);
        return localVarCall;

    }

    /**
     * Send a message
     * ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse sendMessage(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = sendMessageWithHttpInfo(apiToken, channelType, channelUrl, sendMessageData);
        return localVarResp.getData();
    }

    /**
     * Send a message
     * ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> sendMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(apiToken, channelType, channelUrl, sendMessageData, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a message (asynchronously)
     * ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param sendMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageAsync(String apiToken, String channelType, String channelUrl, SendMessageData sendMessageData, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(apiToken, channelType, channelUrl, sendMessageData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateMessageIntoOtherLanguages
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateMessageIntoOtherLanguagesCall(String apiToken, String channelType, String channelUrl, String messageId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/translation"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateMessageIntoOtherLanguagesValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling translateMessageIntoOtherLanguages(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling translateMessageIntoOtherLanguages(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling translateMessageIntoOtherLanguages(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling translateMessageIntoOtherLanguages(Async)");
        }
        

        okhttp3.Call localVarCall = translateMessageIntoOtherLanguagesCall(apiToken, channelType, channelUrl, messageId, body, _callback);
        return localVarCall;

    }

    /**
     * Translate a message into other languages
     * ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param body  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse translateMessageIntoOtherLanguages(String apiToken, String channelType, String channelUrl, String messageId, Object body) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = translateMessageIntoOtherLanguagesWithHttpInfo(apiToken, channelType, channelUrl, messageId, body);
        return localVarResp.getData();
    }

    /**
     * Translate a message into other languages
     * ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> translateMessageIntoOtherLanguagesWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, Object body) throws ApiException {
        okhttp3.Call localVarCall = translateMessageIntoOtherLanguagesValidateBeforeCall(apiToken, channelType, channelUrl, messageId, body, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate a message into other languages (asynchronously)
     * ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateMessageIntoOtherLanguagesAsync(String apiToken, String channelType, String channelUrl, String messageId, Object body, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateMessageIntoOtherLanguagesValidateBeforeCall(apiToken, channelType, channelUrl, messageId, body, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtraDataInMessage
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraDataInMessageCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExtraDataInMessageData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtraDataInMessageValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling updateExtraDataInMessage(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling updateExtraDataInMessage(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling updateExtraDataInMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateExtraDataInMessage(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtraDataInMessageCall(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData, _callback);
        return localVarCall;

    }

    /**
     * Update extra data in a message
     * ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @return UpdateExtraDataInMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExtraDataInMessageResponse updateExtraDataInMessage(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData) throws ApiException {
        ApiResponse<UpdateExtraDataInMessageResponse> localVarResp = updateExtraDataInMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData);
        return localVarResp.getData();
    }

    /**
     * Update extra data in a message
     * ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @return ApiResponse&lt;UpdateExtraDataInMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateExtraDataInMessageResponse> updateExtraDataInMessageWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData) throws ApiException {
        okhttp3.Call localVarCall = updateExtraDataInMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData, null);
        Type localVarReturnType = new TypeToken<UpdateExtraDataInMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update extra data in a message (asynchronously)
     * ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateExtraDataInMessageData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraDataInMessageAsync(String apiToken, String channelType, String channelUrl, String messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData, final ApiCallback<UpdateExtraDataInMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtraDataInMessageValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData, _callback);
        Type localVarReturnType = new TypeToken<UpdateExtraDataInMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessageById
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageByIdCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMessageByIdData;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageByIdValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling updateMessageById(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling updateMessageById(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling updateMessageById(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessageById(Async)");
        }
        

        okhttp3.Call localVarCall = updateMessageByIdCall(apiToken, channelType, channelUrl, messageId, updateMessageByIdData, _callback);
        return localVarCall;

    }

    /**
     * Update a message
     * ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse updateMessageById(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = updateMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, updateMessageByIdData);
        return localVarResp.getData();
    }

    /**
     * Update a message
     * ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> updateMessageByIdWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData) throws ApiException {
        okhttp3.Call localVarCall = updateMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateMessageByIdData, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a message (asynchronously)
     * ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param updateMessageByIdData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageByIdAsync(String apiToken, String channelType, String channelUrl, String messageId, UpdateMessageByIdData updateMessageByIdData, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, updateMessageByIdData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewMessageById
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewMessageByIdCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "message_id" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withSortedMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_sorted_meta_array", withSortedMetaArray));
        }

        if (withMetaArray != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_meta_array", withMetaArray));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewMessageByIdValidateBeforeCall(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewMessageById(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewMessageById(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewMessageById(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling viewMessageById(Async)");
        }
        

        okhttp3.Call localVarCall = viewMessageByIdCall(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray, _callback);
        return localVarCall;

    }

    /**
     * View a message
     * ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @return SendBirdMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdMessageResponse viewMessageById(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray) throws ApiException {
        ApiResponse<SendBirdMessageResponse> localVarResp = viewMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray);
        return localVarResp.getData();
    }

    /**
     * View a message
     * ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @return ApiResponse&lt;SendBirdMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdMessageResponse> viewMessageByIdWithHttpInfo(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray) throws ApiException {
        okhttp3.Call localVarCall = viewMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray, null);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a message (asynchronously)
     * ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param messageId  (required)
     * @param withSortedMetaArray  (optional)
     * @param withMetaArray  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewMessageByIdAsync(String apiToken, String channelType, String channelUrl, String messageId, Boolean withSortedMetaArray, Boolean withMetaArray, final ApiCallback<SendBirdMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewMessageByIdValidateBeforeCall(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray, _callback);
        Type localVarReturnType = new TypeToken<SendBirdMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewTotalNumberOfMessagesInChannel
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewTotalNumberOfMessagesInChannelCall(String apiToken, String channelType, String channelUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewTotalNumberOfMessagesInChannelValidateBeforeCall(String apiToken, String channelType, String channelUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewTotalNumberOfMessagesInChannel(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewTotalNumberOfMessagesInChannel(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewTotalNumberOfMessagesInChannel(Async)");
        }
        

        okhttp3.Call localVarCall = viewTotalNumberOfMessagesInChannelCall(apiToken, channelType, channelUrl, _callback);
        return localVarCall;

    }

    /**
     * View total number of messages in a channel
     * ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @return ViewTotalNumberOfMessagesInChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ViewTotalNumberOfMessagesInChannelResponse viewTotalNumberOfMessagesInChannel(String apiToken, String channelType, String channelUrl) throws ApiException {
        ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> localVarResp = viewTotalNumberOfMessagesInChannelWithHttpInfo(apiToken, channelType, channelUrl);
        return localVarResp.getData();
    }

    /**
     * View total number of messages in a channel
     * ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @return ApiResponse&lt;ViewTotalNumberOfMessagesInChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> viewTotalNumberOfMessagesInChannelWithHttpInfo(String apiToken, String channelType, String channelUrl) throws ApiException {
        okhttp3.Call localVarCall = viewTotalNumberOfMessagesInChannelValidateBeforeCall(apiToken, channelType, channelUrl, null);
        Type localVarReturnType = new TypeToken<ViewTotalNumberOfMessagesInChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View total number of messages in a channel (asynchronously)
     * ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel ----------------------------
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewTotalNumberOfMessagesInChannelAsync(String apiToken, String channelType, String channelUrl, final ApiCallback<ViewTotalNumberOfMessagesInChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewTotalNumberOfMessagesInChannelValidateBeforeCall(apiToken, channelType, channelUrl, _callback);
        Type localVarReturnType = new TypeToken<ViewTotalNumberOfMessagesInChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
