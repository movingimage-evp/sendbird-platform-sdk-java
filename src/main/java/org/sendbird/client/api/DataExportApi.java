/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.sendbird.client.api;

import org.sendbird.client.ApiCallback;
import org.sendbird.client.ApiClient;
import org.sendbird.client.ApiException;
import org.sendbird.client.ApiResponse;
import org.sendbird.client.Configuration;
import org.sendbird.client.Pair;
import org.sendbird.client.ProgressRequestBody;
import org.sendbird.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse20063;
import org.openapitools.client.model.InlineResponse20063ExportedData;
import org.openapitools.client.model.InlineResponse20064;
import org.openapitools.client.model.RegisterAndScheduleDataExportData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listDataExportsByMessageChannelOrUser
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDataExportsByMessageChannelOrUserCall(String dataType, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/export/{data_type}"
            .replaceAll("\\{" + "data_type" + "\\}", localVarApiClient.escapeString(dataType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataExportsByMessageChannelOrUserValidateBeforeCall(String dataType, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataType' is set
        if (dataType == null) {
            throw new ApiException("Missing the required parameter 'dataType' when calling listDataExportsByMessageChannelOrUser(Async)");
        }
        

        okhttp3.Call localVarCall = listDataExportsByMessageChannelOrUserCall(dataType, apiToken, token, limit, _callback);
        return localVarCall;

    }

    /**
     * List data exports by message, channel, or user
     * ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user ----------------------------   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return InlineResponse20063
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20063 listDataExportsByMessageChannelOrUser(String dataType, String apiToken, String token, Integer limit) throws ApiException {
        ApiResponse<InlineResponse20063> localVarResp = listDataExportsByMessageChannelOrUserWithHttpInfo(dataType, apiToken, token, limit);
        return localVarResp.getData();
    }

    /**
     * List data exports by message, channel, or user
     * ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user ----------------------------   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;InlineResponse20063&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20063> listDataExportsByMessageChannelOrUserWithHttpInfo(String dataType, String apiToken, String token, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listDataExportsByMessageChannelOrUserValidateBeforeCall(dataType, apiToken, token, limit, null);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List data exports by message, channel, or user (asynchronously)
     * ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user ----------------------------   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDataExportsByMessageChannelOrUserAsync(String dataType, String apiToken, String token, Integer limit, final ApiCallback<InlineResponse20063> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataExportsByMessageChannelOrUserValidateBeforeCall(dataType, apiToken, token, limit, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerAndScheduleDataExport
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param registerAndScheduleDataExportData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerAndScheduleDataExportCall(String dataType, String apiToken, RegisterAndScheduleDataExportData registerAndScheduleDataExportData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerAndScheduleDataExportData;

        // create path and map variables
        String localVarPath = "/v3/export/{data_type}"
            .replaceAll("\\{" + "data_type" + "\\}", localVarApiClient.escapeString(dataType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerAndScheduleDataExportValidateBeforeCall(String dataType, String apiToken, RegisterAndScheduleDataExportData registerAndScheduleDataExportData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataType' is set
        if (dataType == null) {
            throw new ApiException("Missing the required parameter 'dataType' when calling registerAndScheduleDataExport(Async)");
        }
        

        okhttp3.Call localVarCall = registerAndScheduleDataExportCall(dataType, apiToken, registerAndScheduleDataExportData, _callback);
        return localVarCall;

    }

    /**
     * Register and schedule a data export
     * ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export ----------------------------
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param registerAndScheduleDataExportData  (optional)
     * @return InlineResponse20063ExportedData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20063ExportedData registerAndScheduleDataExport(String dataType, String apiToken, RegisterAndScheduleDataExportData registerAndScheduleDataExportData) throws ApiException {
        ApiResponse<InlineResponse20063ExportedData> localVarResp = registerAndScheduleDataExportWithHttpInfo(dataType, apiToken, registerAndScheduleDataExportData);
        return localVarResp.getData();
    }

    /**
     * Register and schedule a data export
     * ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export ----------------------------
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param registerAndScheduleDataExportData  (optional)
     * @return ApiResponse&lt;InlineResponse20063ExportedData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20063ExportedData> registerAndScheduleDataExportWithHttpInfo(String dataType, String apiToken, RegisterAndScheduleDataExportData registerAndScheduleDataExportData) throws ApiException {
        okhttp3.Call localVarCall = registerAndScheduleDataExportValidateBeforeCall(dataType, apiToken, registerAndScheduleDataExportData, null);
        Type localVarReturnType = new TypeToken<InlineResponse20063ExportedData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register and schedule a data export (asynchronously)
     * ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export ----------------------------
     * @param dataType  (required)
     * @param apiToken  (optional)
     * @param registerAndScheduleDataExportData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerAndScheduleDataExportAsync(String dataType, String apiToken, RegisterAndScheduleDataExportData registerAndScheduleDataExportData, final ApiCallback<InlineResponse20063ExportedData> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerAndScheduleDataExportValidateBeforeCall(dataType, apiToken, registerAndScheduleDataExportData, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20063ExportedData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewDataExportById
     * @param dataType  (required)
     * @param requestId  (required)
     * @param apiToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewDataExportByIdCall(String dataType, String requestId, String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/export/{data_type}/{request_id}"
            .replaceAll("\\{" + "data_type" + "\\}", localVarApiClient.escapeString(dataType.toString()))
            .replaceAll("\\{" + "request_id" + "\\}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewDataExportByIdValidateBeforeCall(String dataType, String requestId, String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataType' is set
        if (dataType == null) {
            throw new ApiException("Missing the required parameter 'dataType' when calling viewDataExportById(Async)");
        }
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling viewDataExportById(Async)");
        }
        

        okhttp3.Call localVarCall = viewDataExportByIdCall(dataType, requestId, apiToken, _callback);
        return localVarCall;

    }

    /**
     * View a data export
     * ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export ----------------------------   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
     * @param dataType  (required)
     * @param requestId  (required)
     * @param apiToken  (optional)
     * @return InlineResponse20064
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20064 viewDataExportById(String dataType, String requestId, String apiToken) throws ApiException {
        ApiResponse<InlineResponse20064> localVarResp = viewDataExportByIdWithHttpInfo(dataType, requestId, apiToken);
        return localVarResp.getData();
    }

    /**
     * View a data export
     * ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export ----------------------------   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
     * @param dataType  (required)
     * @param requestId  (required)
     * @param apiToken  (optional)
     * @return ApiResponse&lt;InlineResponse20064&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20064> viewDataExportByIdWithHttpInfo(String dataType, String requestId, String apiToken) throws ApiException {
        okhttp3.Call localVarCall = viewDataExportByIdValidateBeforeCall(dataType, requestId, apiToken, null);
        Type localVarReturnType = new TypeToken<InlineResponse20064>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a data export (asynchronously)
     * ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export ----------------------------   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
     * @param dataType  (required)
     * @param requestId  (required)
     * @param apiToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewDataExportByIdAsync(String dataType, String requestId, String apiToken, final ApiCallback<InlineResponse20064> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewDataExportByIdValidateBeforeCall(dataType, requestId, apiToken, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20064>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
