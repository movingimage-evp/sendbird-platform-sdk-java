/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.sendbird.client.api;

import org.sendbird.client.ApiCallback;
import org.sendbird.client.ApiClient;
import org.sendbird.client.ApiException;
import org.sendbird.client.ApiResponse;
import org.sendbird.client.Configuration;
import org.sendbird.client.Pair;
import org.sendbird.client.ProgressRequestBody;
import org.sendbird.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SendBirdAdditionalProperties;
import org.openapitools.client.model.ViewUserMetadataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for viewChannelMetacounter
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetacounterCall(String apiToken, String channelType, String channelUrl, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/metacounter"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewChannelMetacounterValidateBeforeCall(String apiToken, String channelType, String channelUrl, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewChannelMetacounter(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewChannelMetacounter(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewChannelMetacounter(Async)");
        }
        

        okhttp3.Call localVarCall = viewChannelMetacounterCall(apiToken, channelType, channelUrl, key, keys, _callback);
        return localVarCall;

    }

    /**
     * View a channel metacounter - When retrieving all items of a channel metacounter
     * ## View a channel metacounter  Retrieves channel metacounter&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metacounter ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @return Map&lt;String, SendBirdAdditionalProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, SendBirdAdditionalProperties> viewChannelMetacounter(String apiToken, String channelType, String channelUrl, String key, List<String> keys) throws ApiException {
        ApiResponse<Map<String, SendBirdAdditionalProperties>> localVarResp = viewChannelMetacounterWithHttpInfo(apiToken, channelType, channelUrl, key, keys);
        return localVarResp.getData();
    }

    /**
     * View a channel metacounter - When retrieving all items of a channel metacounter
     * ## View a channel metacounter  Retrieves channel metacounter&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metacounter ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @return ApiResponse&lt;Map&lt;String, SendBirdAdditionalProperties&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, SendBirdAdditionalProperties>> viewChannelMetacounterWithHttpInfo(String apiToken, String channelType, String channelUrl, String key, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = viewChannelMetacounterValidateBeforeCall(apiToken, channelType, channelUrl, key, keys, null);
        Type localVarReturnType = new TypeToken<Map<String, SendBirdAdditionalProperties>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a channel metacounter - When retrieving all items of a channel metacounter (asynchronously)
     * ## View a channel metacounter  Retrieves channel metacounter&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metacounter ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetacounterAsync(String apiToken, String channelType, String channelUrl, String key, List<String> keys, final ApiCallback<Map<String, SendBirdAdditionalProperties>> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewChannelMetacounterValidateBeforeCall(apiToken, channelType, channelUrl, key, keys, _callback);
        Type localVarReturnType = new TypeToken<Map<String, SendBirdAdditionalProperties>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewChannelMetacounterByKey
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetacounterByKeyCall(String apiToken, String channelType, String channelUrl, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/metacounter/{key}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewChannelMetacounterByKeyValidateBeforeCall(String apiToken, String channelType, String channelUrl, String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewChannelMetacounterByKey(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewChannelMetacounterByKey(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewChannelMetacounterByKey(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling viewChannelMetacounterByKey(Async)");
        }
        

        okhttp3.Call localVarCall = viewChannelMetacounterByKeyCall(apiToken, channelType, channelUrl, key, _callback);
        return localVarCall;

    }

    /**
     * View a channel metacounter - When retrieving a specific item of a channel metacounter by its key
     * ## View a channel metacounter  Retrieves channel metacounter&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metacounter ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @return Map&lt;String, SendBirdAdditionalProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, SendBirdAdditionalProperties> viewChannelMetacounterByKey(String apiToken, String channelType, String channelUrl, String key) throws ApiException {
        ApiResponse<Map<String, SendBirdAdditionalProperties>> localVarResp = viewChannelMetacounterByKeyWithHttpInfo(apiToken, channelType, channelUrl, key);
        return localVarResp.getData();
    }

    /**
     * View a channel metacounter - When retrieving a specific item of a channel metacounter by its key
     * ## View a channel metacounter  Retrieves channel metacounter&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metacounter ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Map&lt;String, SendBirdAdditionalProperties&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, SendBirdAdditionalProperties>> viewChannelMetacounterByKeyWithHttpInfo(String apiToken, String channelType, String channelUrl, String key) throws ApiException {
        okhttp3.Call localVarCall = viewChannelMetacounterByKeyValidateBeforeCall(apiToken, channelType, channelUrl, key, null);
        Type localVarReturnType = new TypeToken<Map<String, SendBirdAdditionalProperties>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a channel metacounter - When retrieving a specific item of a channel metacounter by its key (asynchronously)
     * ## View a channel metacounter  Retrieves channel metacounter&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metacounter ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetacounterByKeyAsync(String apiToken, String channelType, String channelUrl, String key, final ApiCallback<Map<String, SendBirdAdditionalProperties>> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewChannelMetacounterByKeyValidateBeforeCall(apiToken, channelType, channelUrl, key, _callback);
        Type localVarReturnType = new TypeToken<Map<String, SendBirdAdditionalProperties>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewChannelMetadata
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetadataCall(String apiToken, String channelType, String channelUrl, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/metadata"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewChannelMetadataValidateBeforeCall(String apiToken, String channelType, String channelUrl, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewChannelMetadata(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewChannelMetadata(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewChannelMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = viewChannelMetadataCall(apiToken, channelType, channelUrl, key, keys, _callback);
        return localVarCall;

    }

    /**
     * View a channel metadata - When retrieving all items of a channel metadata
     * ## View a channel metadata  Retrieves a channel metadata&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metadata ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> viewChannelMetadata(String apiToken, String channelType, String channelUrl, String key, List<String> keys) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = viewChannelMetadataWithHttpInfo(apiToken, channelType, channelUrl, key, keys);
        return localVarResp.getData();
    }

    /**
     * View a channel metadata - When retrieving all items of a channel metadata
     * ## View a channel metadata  Retrieves a channel metadata&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metadata ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> viewChannelMetadataWithHttpInfo(String apiToken, String channelType, String channelUrl, String key, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = viewChannelMetadataValidateBeforeCall(apiToken, channelType, channelUrl, key, keys, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a channel metadata - When retrieving all items of a channel metadata (asynchronously)
     * ## View a channel metadata  Retrieves a channel metadata&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metadata ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetadataAsync(String apiToken, String channelType, String channelUrl, String key, List<String> keys, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewChannelMetadataValidateBeforeCall(apiToken, channelType, channelUrl, key, keys, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewChannelMetadataByKey
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetadataByKeyCall(String apiToken, String channelType, String channelUrl, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{channel_type}/{channel_url}/metadata/{key}"
            .replaceAll("\\{" + "channel_type" + "\\}", localVarApiClient.escapeString(channelType.toString()))
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewChannelMetadataByKeyValidateBeforeCall(String apiToken, String channelType, String channelUrl, String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewChannelMetadataByKey(Async)");
        }
        
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling viewChannelMetadataByKey(Async)");
        }
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling viewChannelMetadataByKey(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling viewChannelMetadataByKey(Async)");
        }
        

        okhttp3.Call localVarCall = viewChannelMetadataByKeyCall(apiToken, channelType, channelUrl, key, _callback);
        return localVarCall;

    }

    /**
     * View a channel metadata - When retrieving a specific item of a channel metadata by its key
     * ## View a channel metadata  Retrieves a channel metadata&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metadata ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> viewChannelMetadataByKey(String apiToken, String channelType, String channelUrl, String key) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = viewChannelMetadataByKeyWithHttpInfo(apiToken, channelType, channelUrl, key);
        return localVarResp.getData();
    }

    /**
     * View a channel metadata - When retrieving a specific item of a channel metadata by its key
     * ## View a channel metadata  Retrieves a channel metadata&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metadata ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> viewChannelMetadataByKeyWithHttpInfo(String apiToken, String channelType, String channelUrl, String key) throws ApiException {
        okhttp3.Call localVarCall = viewChannelMetadataByKeyValidateBeforeCall(apiToken, channelType, channelUrl, key, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a channel metadata - When retrieving a specific item of a channel metadata by its key (asynchronously)
     * ## View a channel metadata  Retrieves a channel metadata&#39;s one or more items that are stored in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-channel-metadata ----------------------------   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.
     * @param apiToken  (required)
     * @param channelType  (required)
     * @param channelUrl  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewChannelMetadataByKeyAsync(String apiToken, String channelType, String channelUrl, String key, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewChannelMetadataByKeyValidateBeforeCall(apiToken, channelType, channelUrl, key, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewUserMetadata
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewUserMetadataCall(String apiToken, String userId, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{user_id}/metadata"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewUserMetadataValidateBeforeCall(String apiToken, String userId, String key, List<String> keys, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewUserMetadata(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling viewUserMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = viewUserMetadataCall(apiToken, userId, key, keys, _callback);
        return localVarCall;

    }

    /**
     * View a user metadata - When retrieving all items of a user metadata
     * ## View a user metadata  Retrieves a user metadata&#39;s one or more items that are stored in a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-user-metadata ----------------------------   &#x60;user_id&#x60;      Type: string      Description: Specifies the ID of the user to retrieve the metadata in.
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @return ViewUserMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ViewUserMetadataResponse viewUserMetadata(String apiToken, String userId, String key, List<String> keys) throws ApiException {
        ApiResponse<ViewUserMetadataResponse> localVarResp = viewUserMetadataWithHttpInfo(apiToken, userId, key, keys);
        return localVarResp.getData();
    }

    /**
     * View a user metadata - When retrieving all items of a user metadata
     * ## View a user metadata  Retrieves a user metadata&#39;s one or more items that are stored in a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-user-metadata ----------------------------   &#x60;user_id&#x60;      Type: string      Description: Specifies the ID of the user to retrieve the metadata in.
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @return ApiResponse&lt;ViewUserMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewUserMetadataResponse> viewUserMetadataWithHttpInfo(String apiToken, String userId, String key, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = viewUserMetadataValidateBeforeCall(apiToken, userId, key, keys, null);
        Type localVarReturnType = new TypeToken<ViewUserMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a user metadata - When retrieving all items of a user metadata (asynchronously)
     * ## View a user metadata  Retrieves a user metadata&#39;s one or more items that are stored in a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-user-metadata ----------------------------   &#x60;user_id&#x60;      Type: string      Description: Specifies the ID of the user to retrieve the metadata in.
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (optional)
     * @param keys  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewUserMetadataAsync(String apiToken, String userId, String key, List<String> keys, final ApiCallback<ViewUserMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewUserMetadataValidateBeforeCall(apiToken, userId, key, keys, _callback);
        Type localVarReturnType = new TypeToken<ViewUserMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewUserMetadataByKey
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewUserMetadataByKeyCall(String apiToken, String userId, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{user_id}/metadata/{key}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewUserMetadataByKeyValidateBeforeCall(String apiToken, String userId, String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiToken' is set
        if (apiToken == null) {
            throw new ApiException("Missing the required parameter 'apiToken' when calling viewUserMetadataByKey(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling viewUserMetadataByKey(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling viewUserMetadataByKey(Async)");
        }
        

        okhttp3.Call localVarCall = viewUserMetadataByKeyCall(apiToken, userId, key, _callback);
        return localVarCall;

    }

    /**
     * View a user metadata - When retrieving a specific item of a user metadata by its key
     * ## View a user metadata  Retrieves a user metadata&#39;s one or more items that are stored in a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-user-metadata ----------------------------   &#x60;user_id&#x60;      Type: string      Description: Specifies the ID of the user to retrieve the metadata in.
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> viewUserMetadataByKey(String apiToken, String userId, String key) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = viewUserMetadataByKeyWithHttpInfo(apiToken, userId, key);
        return localVarResp.getData();
    }

    /**
     * View a user metadata - When retrieving a specific item of a user metadata by its key
     * ## View a user metadata  Retrieves a user metadata&#39;s one or more items that are stored in a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-user-metadata ----------------------------   &#x60;user_id&#x60;      Type: string      Description: Specifies the ID of the user to retrieve the metadata in.
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> viewUserMetadataByKeyWithHttpInfo(String apiToken, String userId, String key) throws ApiException {
        okhttp3.Call localVarCall = viewUserMetadataByKeyValidateBeforeCall(apiToken, userId, key, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a user metadata - When retrieving a specific item of a user metadata by its key (asynchronously)
     * ## View a user metadata  Retrieves a user metadata&#39;s one or more items that are stored in a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user-and-channel-metadata#2-view-a-user-metadata ----------------------------   &#x60;user_id&#x60;      Type: string      Description: Specifies the ID of the user to retrieve the metadata in.
     * @param apiToken  (required)
     * @param userId  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewUserMetadataByKeyAsync(String apiToken, String userId, String key, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewUserMetadataByKeyValidateBeforeCall(apiToken, userId, key, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
