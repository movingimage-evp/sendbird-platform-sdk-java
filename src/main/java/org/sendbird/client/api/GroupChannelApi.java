/*
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.sendbird.client.api;

import org.sendbird.client.ApiCallback;
import org.sendbird.client.ApiClient;
import org.sendbird.client.ApiException;
import org.sendbird.client.ApiResponse;
import org.sendbird.client.Configuration;
import org.sendbird.client.Pair;
import org.sendbird.client.ProgressRequestBody;
import org.sendbird.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GcAcceptInvitationData;
import org.openapitools.client.model.GcBanUserData;
import org.openapitools.client.model.GcCreateChannelData;
import org.openapitools.client.model.GcDeclineInvitationData;
import org.openapitools.client.model.GcFreezeChannelData;
import org.openapitools.client.model.GcHideOrArchiveChannelData;
import org.openapitools.client.model.GcInviteAsMembersData;
import org.openapitools.client.model.GcJoinChannelData;
import org.openapitools.client.model.GcLeaveChannelData;
import org.openapitools.client.model.GcMuteUserData;
import org.openapitools.client.model.GcRegisterOperatorsData;
import org.openapitools.client.model.GcResetChatHistoryData;
import org.openapitools.client.model.GcUpdateBanByIdData;
import org.openapitools.client.model.GcUpdateChannelByUrlData;
import org.openapitools.client.model.InlineResponse20017;
import org.openapitools.client.model.InlineResponse20031;
import org.openapitools.client.model.InlineResponse20033;
import org.openapitools.client.model.InlineResponse20033BannedList;
import org.openapitools.client.model.InlineResponse20034;
import org.openapitools.client.model.InlineResponse20035;
import org.openapitools.client.model.InlineResponse20036;
import org.openapitools.client.model.InlineResponse20037;
import org.openapitools.client.model.InlineResponse20038;
import org.openapitools.client.model.SendBirdGroupChannel;
import org.openapitools.client.model.SendBirdUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupChannelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gcAcceptInvitation
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcAcceptInvitationData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcAcceptInvitationCall(String channelUrl, String apiToken, GcAcceptInvitationData gcAcceptInvitationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcAcceptInvitationData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/accept"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcAcceptInvitationValidateBeforeCall(String channelUrl, String apiToken, GcAcceptInvitationData gcAcceptInvitationData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcAcceptInvitation(Async)");
        }
        

        okhttp3.Call localVarCall = gcAcceptInvitationCall(channelUrl, apiToken, gcAcceptInvitationData, _callback);
        return localVarCall;

    }

    /**
     * Accept an invitation
     * ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcAcceptInvitationData  (optional)
     * @return SendBirdGroupChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdGroupChannel gcAcceptInvitation(String channelUrl, String apiToken, GcAcceptInvitationData gcAcceptInvitationData) throws ApiException {
        ApiResponse<SendBirdGroupChannel> localVarResp = gcAcceptInvitationWithHttpInfo(channelUrl, apiToken, gcAcceptInvitationData);
        return localVarResp.getData();
    }

    /**
     * Accept an invitation
     * ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcAcceptInvitationData  (optional)
     * @return ApiResponse&lt;SendBirdGroupChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdGroupChannel> gcAcceptInvitationWithHttpInfo(String channelUrl, String apiToken, GcAcceptInvitationData gcAcceptInvitationData) throws ApiException {
        okhttp3.Call localVarCall = gcAcceptInvitationValidateBeforeCall(channelUrl, apiToken, gcAcceptInvitationData, null);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept an invitation (asynchronously)
     * ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcAcceptInvitationData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcAcceptInvitationAsync(String channelUrl, String apiToken, GcAcceptInvitationData gcAcceptInvitationData, final ApiCallback<SendBirdGroupChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcAcceptInvitationValidateBeforeCall(channelUrl, apiToken, gcAcceptInvitationData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcBanUser
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcBanUserData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcBanUserCall(String channelUrl, String apiToken, GcBanUserData gcBanUserData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcBanUserData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/ban"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcBanUserValidateBeforeCall(String channelUrl, String apiToken, GcBanUserData gcBanUserData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcBanUser(Async)");
        }
        

        okhttp3.Call localVarCall = gcBanUserCall(channelUrl, apiToken, gcBanUserData, _callback);
        return localVarCall;

    }

    /**
     * Ban a user
     * ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcBanUserData  (optional)
     * @return InlineResponse20033BannedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20033BannedList gcBanUser(String channelUrl, String apiToken, GcBanUserData gcBanUserData) throws ApiException {
        ApiResponse<InlineResponse20033BannedList> localVarResp = gcBanUserWithHttpInfo(channelUrl, apiToken, gcBanUserData);
        return localVarResp.getData();
    }

    /**
     * Ban a user
     * ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcBanUserData  (optional)
     * @return ApiResponse&lt;InlineResponse20033BannedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20033BannedList> gcBanUserWithHttpInfo(String channelUrl, String apiToken, GcBanUserData gcBanUserData) throws ApiException {
        okhttp3.Call localVarCall = gcBanUserValidateBeforeCall(channelUrl, apiToken, gcBanUserData, null);
        Type localVarReturnType = new TypeToken<InlineResponse20033BannedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ban a user (asynchronously)
     * ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcBanUserData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcBanUserAsync(String channelUrl, String apiToken, GcBanUserData gcBanUserData, final ApiCallback<InlineResponse20033BannedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcBanUserValidateBeforeCall(channelUrl, apiToken, gcBanUserData, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20033BannedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcCancelTheRegistrationOfOperators
     * @param channelUrl  (required)
     * @param operatorIds  (required)
     * @param apiToken  (optional)
     * @param deleteAll  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcCancelTheRegistrationOfOperatorsCall(String channelUrl, List<String> operatorIds, String apiToken, Boolean deleteAll, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/operators"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operatorIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "operator_ids", operatorIds));
        }

        if (deleteAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delete_all", deleteAll));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcCancelTheRegistrationOfOperatorsValidateBeforeCall(String channelUrl, List<String> operatorIds, String apiToken, Boolean deleteAll, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcCancelTheRegistrationOfOperators(Async)");
        }
        
        // verify the required parameter 'operatorIds' is set
        if (operatorIds == null) {
            throw new ApiException("Missing the required parameter 'operatorIds' when calling gcCancelTheRegistrationOfOperators(Async)");
        }
        

        okhttp3.Call localVarCall = gcCancelTheRegistrationOfOperatorsCall(channelUrl, operatorIds, apiToken, deleteAll, _callback);
        return localVarCall;

    }

    /**
     * Cancel the registration of operators
     * ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
     * @param channelUrl  (required)
     * @param operatorIds  (required)
     * @param apiToken  (optional)
     * @param deleteAll  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcCancelTheRegistrationOfOperators(String channelUrl, List<String> operatorIds, String apiToken, Boolean deleteAll) throws ApiException {
        gcCancelTheRegistrationOfOperatorsWithHttpInfo(channelUrl, operatorIds, apiToken, deleteAll);
    }

    /**
     * Cancel the registration of operators
     * ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
     * @param channelUrl  (required)
     * @param operatorIds  (required)
     * @param apiToken  (optional)
     * @param deleteAll  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcCancelTheRegistrationOfOperatorsWithHttpInfo(String channelUrl, List<String> operatorIds, String apiToken, Boolean deleteAll) throws ApiException {
        okhttp3.Call localVarCall = gcCancelTheRegistrationOfOperatorsValidateBeforeCall(channelUrl, operatorIds, apiToken, deleteAll, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel the registration of operators (asynchronously)
     * ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
     * @param channelUrl  (required)
     * @param operatorIds  (required)
     * @param apiToken  (optional)
     * @param deleteAll  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcCancelTheRegistrationOfOperatorsAsync(String channelUrl, List<String> operatorIds, String apiToken, Boolean deleteAll, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcCancelTheRegistrationOfOperatorsValidateBeforeCall(channelUrl, operatorIds, apiToken, deleteAll, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcCheckIfMemberById
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcCheckIfMemberByIdCall(String channelUrl, String userId, String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/members/{user_id}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcCheckIfMemberByIdValidateBeforeCall(String channelUrl, String userId, String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcCheckIfMemberById(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling gcCheckIfMemberById(Async)");
        }
        

        okhttp3.Call localVarCall = gcCheckIfMemberByIdCall(channelUrl, userId, apiToken, _callback);
        return localVarCall;

    }

    /**
     * Check if member
     * ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member ----------------------------
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @return InlineResponse20037
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20037 gcCheckIfMemberById(String channelUrl, String userId, String apiToken) throws ApiException {
        ApiResponse<InlineResponse20037> localVarResp = gcCheckIfMemberByIdWithHttpInfo(channelUrl, userId, apiToken);
        return localVarResp.getData();
    }

    /**
     * Check if member
     * ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member ----------------------------
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @return ApiResponse&lt;InlineResponse20037&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20037> gcCheckIfMemberByIdWithHttpInfo(String channelUrl, String userId, String apiToken) throws ApiException {
        okhttp3.Call localVarCall = gcCheckIfMemberByIdValidateBeforeCall(channelUrl, userId, apiToken, null);
        Type localVarReturnType = new TypeToken<InlineResponse20037>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if member (asynchronously)
     * ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member ----------------------------
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcCheckIfMemberByIdAsync(String channelUrl, String userId, String apiToken, final ApiCallback<InlineResponse20037> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcCheckIfMemberByIdValidateBeforeCall(channelUrl, userId, apiToken, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20037>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcCreateChannel
     * @param apiToken  (optional)
     * @param gcCreateChannelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcCreateChannelCall(String apiToken, GcCreateChannelData gcCreateChannelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcCreateChannelData;

        // create path and map variables
        String localVarPath = "/v3/group_channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcCreateChannelValidateBeforeCall(String apiToken, GcCreateChannelData gcCreateChannelData, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = gcCreateChannelCall(apiToken, gcCreateChannelData, _callback);
        return localVarCall;

    }

    /**
     * Create a channel
     * ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
     * @param apiToken  (optional)
     * @param gcCreateChannelData  (optional)
     * @return SendBirdGroupChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdGroupChannel gcCreateChannel(String apiToken, GcCreateChannelData gcCreateChannelData) throws ApiException {
        ApiResponse<SendBirdGroupChannel> localVarResp = gcCreateChannelWithHttpInfo(apiToken, gcCreateChannelData);
        return localVarResp.getData();
    }

    /**
     * Create a channel
     * ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
     * @param apiToken  (optional)
     * @param gcCreateChannelData  (optional)
     * @return ApiResponse&lt;SendBirdGroupChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdGroupChannel> gcCreateChannelWithHttpInfo(String apiToken, GcCreateChannelData gcCreateChannelData) throws ApiException {
        okhttp3.Call localVarCall = gcCreateChannelValidateBeforeCall(apiToken, gcCreateChannelData, null);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a channel (asynchronously)
     * ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
     * @param apiToken  (optional)
     * @param gcCreateChannelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcCreateChannelAsync(String apiToken, GcCreateChannelData gcCreateChannelData, final ApiCallback<SendBirdGroupChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcCreateChannelValidateBeforeCall(apiToken, gcCreateChannelData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcDeclineInvitation
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcDeclineInvitationData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcDeclineInvitationCall(String channelUrl, String apiToken, GcDeclineInvitationData gcDeclineInvitationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcDeclineInvitationData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/decline"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcDeclineInvitationValidateBeforeCall(String channelUrl, String apiToken, GcDeclineInvitationData gcDeclineInvitationData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcDeclineInvitation(Async)");
        }
        

        okhttp3.Call localVarCall = gcDeclineInvitationCall(channelUrl, apiToken, gcDeclineInvitationData, _callback);
        return localVarCall;

    }

    /**
     * Decline an invitation
     * ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcDeclineInvitationData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcDeclineInvitation(String channelUrl, String apiToken, GcDeclineInvitationData gcDeclineInvitationData) throws ApiException {
        gcDeclineInvitationWithHttpInfo(channelUrl, apiToken, gcDeclineInvitationData);
    }

    /**
     * Decline an invitation
     * ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcDeclineInvitationData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcDeclineInvitationWithHttpInfo(String channelUrl, String apiToken, GcDeclineInvitationData gcDeclineInvitationData) throws ApiException {
        okhttp3.Call localVarCall = gcDeclineInvitationValidateBeforeCall(channelUrl, apiToken, gcDeclineInvitationData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Decline an invitation (asynchronously)
     * ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcDeclineInvitationData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcDeclineInvitationAsync(String channelUrl, String apiToken, GcDeclineInvitationData gcDeclineInvitationData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcDeclineInvitationValidateBeforeCall(channelUrl, apiToken, gcDeclineInvitationData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcDeleteChannelByUrl
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcDeleteChannelByUrlCall(String channelUrl, String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcDeleteChannelByUrlValidateBeforeCall(String channelUrl, String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcDeleteChannelByUrl(Async)");
        }
        

        okhttp3.Call localVarCall = gcDeleteChannelByUrlCall(channelUrl, apiToken, _callback);
        return localVarCall;

    }

    /**
     * Delete a channel
     * ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcDeleteChannelByUrl(String channelUrl, String apiToken) throws ApiException {
        gcDeleteChannelByUrlWithHttpInfo(channelUrl, apiToken);
    }

    /**
     * Delete a channel
     * ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcDeleteChannelByUrlWithHttpInfo(String channelUrl, String apiToken) throws ApiException {
        okhttp3.Call localVarCall = gcDeleteChannelByUrlValidateBeforeCall(channelUrl, apiToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a channel (asynchronously)
     * ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcDeleteChannelByUrlAsync(String channelUrl, String apiToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcDeleteChannelByUrlValidateBeforeCall(channelUrl, apiToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcFreezeChannel
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcFreezeChannelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcFreezeChannelCall(String channelUrl, String apiToken, GcFreezeChannelData gcFreezeChannelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcFreezeChannelData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/freeze"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcFreezeChannelValidateBeforeCall(String channelUrl, String apiToken, GcFreezeChannelData gcFreezeChannelData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcFreezeChannel(Async)");
        }
        

        okhttp3.Call localVarCall = gcFreezeChannelCall(channelUrl, apiToken, gcFreezeChannelData, _callback);
        return localVarCall;

    }

    /**
     * Freeze a channel
     * ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcFreezeChannelData  (optional)
     * @return SendBirdGroupChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdGroupChannel gcFreezeChannel(String channelUrl, String apiToken, GcFreezeChannelData gcFreezeChannelData) throws ApiException {
        ApiResponse<SendBirdGroupChannel> localVarResp = gcFreezeChannelWithHttpInfo(channelUrl, apiToken, gcFreezeChannelData);
        return localVarResp.getData();
    }

    /**
     * Freeze a channel
     * ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcFreezeChannelData  (optional)
     * @return ApiResponse&lt;SendBirdGroupChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdGroupChannel> gcFreezeChannelWithHttpInfo(String channelUrl, String apiToken, GcFreezeChannelData gcFreezeChannelData) throws ApiException {
        okhttp3.Call localVarCall = gcFreezeChannelValidateBeforeCall(channelUrl, apiToken, gcFreezeChannelData, null);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Freeze a channel (asynchronously)
     * ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcFreezeChannelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcFreezeChannelAsync(String channelUrl, String apiToken, GcFreezeChannelData gcFreezeChannelData, final ApiCallback<SendBirdGroupChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcFreezeChannelValidateBeforeCall(channelUrl, apiToken, gcFreezeChannelData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcHideOrArchiveChannel
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcHideOrArchiveChannelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcHideOrArchiveChannelCall(String channelUrl, String apiToken, GcHideOrArchiveChannelData gcHideOrArchiveChannelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcHideOrArchiveChannelData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/hide"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcHideOrArchiveChannelValidateBeforeCall(String channelUrl, String apiToken, GcHideOrArchiveChannelData gcHideOrArchiveChannelData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcHideOrArchiveChannel(Async)");
        }
        

        okhttp3.Call localVarCall = gcHideOrArchiveChannelCall(channelUrl, apiToken, gcHideOrArchiveChannelData, _callback);
        return localVarCall;

    }

    /**
     * Hide or archive a channel
     * ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcHideOrArchiveChannelData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcHideOrArchiveChannel(String channelUrl, String apiToken, GcHideOrArchiveChannelData gcHideOrArchiveChannelData) throws ApiException {
        gcHideOrArchiveChannelWithHttpInfo(channelUrl, apiToken, gcHideOrArchiveChannelData);
    }

    /**
     * Hide or archive a channel
     * ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcHideOrArchiveChannelData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcHideOrArchiveChannelWithHttpInfo(String channelUrl, String apiToken, GcHideOrArchiveChannelData gcHideOrArchiveChannelData) throws ApiException {
        okhttp3.Call localVarCall = gcHideOrArchiveChannelValidateBeforeCall(channelUrl, apiToken, gcHideOrArchiveChannelData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hide or archive a channel (asynchronously)
     * ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcHideOrArchiveChannelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcHideOrArchiveChannelAsync(String channelUrl, String apiToken, GcHideOrArchiveChannelData gcHideOrArchiveChannelData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcHideOrArchiveChannelValidateBeforeCall(channelUrl, apiToken, gcHideOrArchiveChannelData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcInviteAsMembers
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcInviteAsMembersData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcInviteAsMembersCall(String channelUrl, String apiToken, GcInviteAsMembersData gcInviteAsMembersData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcInviteAsMembersData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/invite"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcInviteAsMembersValidateBeforeCall(String channelUrl, String apiToken, GcInviteAsMembersData gcInviteAsMembersData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcInviteAsMembers(Async)");
        }
        

        okhttp3.Call localVarCall = gcInviteAsMembersCall(channelUrl, apiToken, gcInviteAsMembersData, _callback);
        return localVarCall;

    }

    /**
     * Invite as members
     * ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcInviteAsMembersData  (optional)
     * @return SendBirdGroupChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdGroupChannel gcInviteAsMembers(String channelUrl, String apiToken, GcInviteAsMembersData gcInviteAsMembersData) throws ApiException {
        ApiResponse<SendBirdGroupChannel> localVarResp = gcInviteAsMembersWithHttpInfo(channelUrl, apiToken, gcInviteAsMembersData);
        return localVarResp.getData();
    }

    /**
     * Invite as members
     * ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcInviteAsMembersData  (optional)
     * @return ApiResponse&lt;SendBirdGroupChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdGroupChannel> gcInviteAsMembersWithHttpInfo(String channelUrl, String apiToken, GcInviteAsMembersData gcInviteAsMembersData) throws ApiException {
        okhttp3.Call localVarCall = gcInviteAsMembersValidateBeforeCall(channelUrl, apiToken, gcInviteAsMembersData, null);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invite as members (asynchronously)
     * ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcInviteAsMembersData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcInviteAsMembersAsync(String channelUrl, String apiToken, GcInviteAsMembersData gcInviteAsMembersData, final ApiCallback<SendBirdGroupChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcInviteAsMembersValidateBeforeCall(channelUrl, apiToken, gcInviteAsMembersData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcJoinChannel
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcJoinChannelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcJoinChannelCall(String channelUrl, String apiToken, GcJoinChannelData gcJoinChannelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcJoinChannelData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/join"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcJoinChannelValidateBeforeCall(String channelUrl, String apiToken, GcJoinChannelData gcJoinChannelData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcJoinChannel(Async)");
        }
        

        okhttp3.Call localVarCall = gcJoinChannelCall(channelUrl, apiToken, gcJoinChannelData, _callback);
        return localVarCall;

    }

    /**
     * Join a channel
     * ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcJoinChannelData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcJoinChannel(String channelUrl, String apiToken, GcJoinChannelData gcJoinChannelData) throws ApiException {
        gcJoinChannelWithHttpInfo(channelUrl, apiToken, gcJoinChannelData);
    }

    /**
     * Join a channel
     * ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcJoinChannelData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcJoinChannelWithHttpInfo(String channelUrl, String apiToken, GcJoinChannelData gcJoinChannelData) throws ApiException {
        okhttp3.Call localVarCall = gcJoinChannelValidateBeforeCall(channelUrl, apiToken, gcJoinChannelData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Join a channel (asynchronously)
     * ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcJoinChannelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcJoinChannelAsync(String channelUrl, String apiToken, GcJoinChannelData gcJoinChannelData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcJoinChannelValidateBeforeCall(channelUrl, apiToken, gcJoinChannelData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcLeaveChannel
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcLeaveChannelData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcLeaveChannelCall(String channelUrl, String apiToken, GcLeaveChannelData gcLeaveChannelData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcLeaveChannelData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/leave"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcLeaveChannelValidateBeforeCall(String channelUrl, String apiToken, GcLeaveChannelData gcLeaveChannelData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcLeaveChannel(Async)");
        }
        

        okhttp3.Call localVarCall = gcLeaveChannelCall(channelUrl, apiToken, gcLeaveChannelData, _callback);
        return localVarCall;

    }

    /**
     * Leave a channel
     * ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcLeaveChannelData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcLeaveChannel(String channelUrl, String apiToken, GcLeaveChannelData gcLeaveChannelData) throws ApiException {
        gcLeaveChannelWithHttpInfo(channelUrl, apiToken, gcLeaveChannelData);
    }

    /**
     * Leave a channel
     * ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcLeaveChannelData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcLeaveChannelWithHttpInfo(String channelUrl, String apiToken, GcLeaveChannelData gcLeaveChannelData) throws ApiException {
        okhttp3.Call localVarCall = gcLeaveChannelValidateBeforeCall(channelUrl, apiToken, gcLeaveChannelData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Leave a channel (asynchronously)
     * ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcLeaveChannelData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcLeaveChannelAsync(String channelUrl, String apiToken, GcLeaveChannelData gcLeaveChannelData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcLeaveChannelValidateBeforeCall(channelUrl, apiToken, gcLeaveChannelData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcListBannedUsers
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListBannedUsersCall(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/ban"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcListBannedUsersValidateBeforeCall(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcListBannedUsers(Async)");
        }
        

        okhttp3.Call localVarCall = gcListBannedUsersCall(channelUrl, apiToken, token, limit, _callback);
        return localVarCall;

    }

    /**
     * List banned users
     * ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return InlineResponse20033
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20033 gcListBannedUsers(String channelUrl, String apiToken, String token, Integer limit) throws ApiException {
        ApiResponse<InlineResponse20033> localVarResp = gcListBannedUsersWithHttpInfo(channelUrl, apiToken, token, limit);
        return localVarResp.getData();
    }

    /**
     * List banned users
     * ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;InlineResponse20033&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20033> gcListBannedUsersWithHttpInfo(String channelUrl, String apiToken, String token, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = gcListBannedUsersValidateBeforeCall(channelUrl, apiToken, token, limit, null);
        Type localVarReturnType = new TypeToken<InlineResponse20033>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List banned users (asynchronously)
     * ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListBannedUsersAsync(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback<InlineResponse20033> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcListBannedUsersValidateBeforeCall(channelUrl, apiToken, token, limit, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20033>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcListChannels
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param distinctMode  (optional)
     * @param publicMode  (optional)
     * @param superMode  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param showEmpty  (optional)
     * @param showMember  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMetadata  (optional)
     * @param showFrozen  (optional)
     * @param order  (optional)
     * @param metadataOrderKey  (optional)
     * @param customTypes  (optional)
     * @param customTypeStartswith  (optional)
     * @param channelUrls  (optional)
     * @param name  (optional)
     * @param nameContains  (optional)
     * @param nameStartswith  (optional)
     * @param membersExactlyIn  (optional)
     * @param membersIncludeIn  (optional)
     * @param queryType  (optional)
     * @param membersNickname  (optional)
     * @param membersNicknameContains  (optional)
     * @param metadataKey  (optional)
     * @param metadataValues  (optional)
     * @param metadataValueStartswith  (optional)
     * @param metacounterKey  (optional)
     * @param metacounterValues  (optional)
     * @param metacounterValueGt  (optional)
     * @param metacounterValueGte  (optional)
     * @param metacounterValueLt  (optional)
     * @param metacounterValueLte  (optional)
     * @param includeSortedMetaarrayInLastMessage  (optional)
     * @param customType  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @param isDistinct  (optional)
     * @param membersIn  (optional)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListChannelsCall(String apiToken, String token, Integer limit, String distinctMode, String publicMode, String superMode, Integer createdAfter, Integer createdBefore, Boolean showEmpty, Boolean showMember, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMetadata, Boolean showFrozen, String order, String metadataOrderKey, String customTypes, String customTypeStartswith, String channelUrls, String name, String nameContains, String nameStartswith, String membersExactlyIn, String membersIncludeIn, String queryType, String membersNickname, String membersNicknameContains, String metadataKey, String metadataValues, String metadataValueStartswith, String metacounterKey, String metacounterValues, String metacounterValueGt, String metacounterValueGte, String metacounterValueLt, String metacounterValueLte, Boolean includeSortedMetaarrayInLastMessage, String customType, Boolean readReceipt, Boolean member, Boolean isDistinct, String membersIn, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (distinctMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distinct_mode", distinctMode));
        }

        if (publicMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public_mode", publicMode));
        }

        if (superMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("super_mode", superMode));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (showEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_empty", showEmpty));
        }

        if (showMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_member", showMember));
        }

        if (showDeliveryReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_delivery_receipt", showDeliveryReceipt));
        }

        if (showReadReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_read_receipt", showReadReceipt));
        }

        if (showMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_metadata", showMetadata));
        }

        if (showFrozen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_frozen", showFrozen));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (metadataOrderKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata_order_key", metadataOrderKey));
        }

        if (customTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_types", customTypes));
        }

        if (customTypeStartswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_type_startswith", customTypeStartswith));
        }

        if (channelUrls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_urls", channelUrls));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (nameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_contains", nameContains));
        }

        if (nameStartswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_startswith", nameStartswith));
        }

        if (membersExactlyIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members_exactly_in", membersExactlyIn));
        }

        if (membersIncludeIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members_include_in", membersIncludeIn));
        }

        if (queryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query_type", queryType));
        }

        if (membersNickname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members_nickname", membersNickname));
        }

        if (membersNicknameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members_nickname_contains", membersNicknameContains));
        }

        if (metadataKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata_key", metadataKey));
        }

        if (metadataValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata_values", metadataValues));
        }

        if (metadataValueStartswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata_value_startswith", metadataValueStartswith));
        }

        if (metacounterKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metacounter_key", metacounterKey));
        }

        if (metacounterValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metacounter_values", metacounterValues));
        }

        if (metacounterValueGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metacounter_value_gt", metacounterValueGt));
        }

        if (metacounterValueGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metacounter_value_gte", metacounterValueGte));
        }

        if (metacounterValueLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metacounter_value_lt", metacounterValueLt));
        }

        if (metacounterValueLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metacounter_value_lte", metacounterValueLte));
        }

        if (includeSortedMetaarrayInLastMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_sorted_metaarray_in_last_message", includeSortedMetaarrayInLastMessage));
        }

        if (customType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_type", customType));
        }

        if (readReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read_receipt", readReceipt));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (isDistinct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_distinct", isDistinct));
        }

        if (membersIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members_in", membersIn));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcListChannelsValidateBeforeCall(String apiToken, String token, Integer limit, String distinctMode, String publicMode, String superMode, Integer createdAfter, Integer createdBefore, Boolean showEmpty, Boolean showMember, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMetadata, Boolean showFrozen, String order, String metadataOrderKey, String customTypes, String customTypeStartswith, String channelUrls, String name, String nameContains, String nameStartswith, String membersExactlyIn, String membersIncludeIn, String queryType, String membersNickname, String membersNicknameContains, String metadataKey, String metadataValues, String metadataValueStartswith, String metacounterKey, String metacounterValues, String metacounterValueGt, String metacounterValueGte, String metacounterValueLt, String metacounterValueLte, Boolean includeSortedMetaarrayInLastMessage, String customType, Boolean readReceipt, Boolean member, Boolean isDistinct, String membersIn, String userId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = gcListChannelsCall(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, customType, readReceipt, member, isDistinct, membersIn, userId, _callback);
        return localVarCall;

    }

    /**
     * List channels
     * ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels ----------------------------
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param distinctMode  (optional)
     * @param publicMode  (optional)
     * @param superMode  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param showEmpty  (optional)
     * @param showMember  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMetadata  (optional)
     * @param showFrozen  (optional)
     * @param order  (optional)
     * @param metadataOrderKey  (optional)
     * @param customTypes  (optional)
     * @param customTypeStartswith  (optional)
     * @param channelUrls  (optional)
     * @param name  (optional)
     * @param nameContains  (optional)
     * @param nameStartswith  (optional)
     * @param membersExactlyIn  (optional)
     * @param membersIncludeIn  (optional)
     * @param queryType  (optional)
     * @param membersNickname  (optional)
     * @param membersNicknameContains  (optional)
     * @param metadataKey  (optional)
     * @param metadataValues  (optional)
     * @param metadataValueStartswith  (optional)
     * @param metacounterKey  (optional)
     * @param metacounterValues  (optional)
     * @param metacounterValueGt  (optional)
     * @param metacounterValueGte  (optional)
     * @param metacounterValueLt  (optional)
     * @param metacounterValueLte  (optional)
     * @param includeSortedMetaarrayInLastMessage  (optional)
     * @param customType  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @param isDistinct  (optional)
     * @param membersIn  (optional)
     * @param userId  (optional)
     * @return InlineResponse20017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20017 gcListChannels(String apiToken, String token, Integer limit, String distinctMode, String publicMode, String superMode, Integer createdAfter, Integer createdBefore, Boolean showEmpty, Boolean showMember, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMetadata, Boolean showFrozen, String order, String metadataOrderKey, String customTypes, String customTypeStartswith, String channelUrls, String name, String nameContains, String nameStartswith, String membersExactlyIn, String membersIncludeIn, String queryType, String membersNickname, String membersNicknameContains, String metadataKey, String metadataValues, String metadataValueStartswith, String metacounterKey, String metacounterValues, String metacounterValueGt, String metacounterValueGte, String metacounterValueLt, String metacounterValueLte, Boolean includeSortedMetaarrayInLastMessage, String customType, Boolean readReceipt, Boolean member, Boolean isDistinct, String membersIn, String userId) throws ApiException {
        ApiResponse<InlineResponse20017> localVarResp = gcListChannelsWithHttpInfo(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, customType, readReceipt, member, isDistinct, membersIn, userId);
        return localVarResp.getData();
    }

    /**
     * List channels
     * ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels ----------------------------
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param distinctMode  (optional)
     * @param publicMode  (optional)
     * @param superMode  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param showEmpty  (optional)
     * @param showMember  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMetadata  (optional)
     * @param showFrozen  (optional)
     * @param order  (optional)
     * @param metadataOrderKey  (optional)
     * @param customTypes  (optional)
     * @param customTypeStartswith  (optional)
     * @param channelUrls  (optional)
     * @param name  (optional)
     * @param nameContains  (optional)
     * @param nameStartswith  (optional)
     * @param membersExactlyIn  (optional)
     * @param membersIncludeIn  (optional)
     * @param queryType  (optional)
     * @param membersNickname  (optional)
     * @param membersNicknameContains  (optional)
     * @param metadataKey  (optional)
     * @param metadataValues  (optional)
     * @param metadataValueStartswith  (optional)
     * @param metacounterKey  (optional)
     * @param metacounterValues  (optional)
     * @param metacounterValueGt  (optional)
     * @param metacounterValueGte  (optional)
     * @param metacounterValueLt  (optional)
     * @param metacounterValueLte  (optional)
     * @param includeSortedMetaarrayInLastMessage  (optional)
     * @param customType  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @param isDistinct  (optional)
     * @param membersIn  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20017> gcListChannelsWithHttpInfo(String apiToken, String token, Integer limit, String distinctMode, String publicMode, String superMode, Integer createdAfter, Integer createdBefore, Boolean showEmpty, Boolean showMember, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMetadata, Boolean showFrozen, String order, String metadataOrderKey, String customTypes, String customTypeStartswith, String channelUrls, String name, String nameContains, String nameStartswith, String membersExactlyIn, String membersIncludeIn, String queryType, String membersNickname, String membersNicknameContains, String metadataKey, String metadataValues, String metadataValueStartswith, String metacounterKey, String metacounterValues, String metacounterValueGt, String metacounterValueGte, String metacounterValueLt, String metacounterValueLte, Boolean includeSortedMetaarrayInLastMessage, String customType, Boolean readReceipt, Boolean member, Boolean isDistinct, String membersIn, String userId) throws ApiException {
        okhttp3.Call localVarCall = gcListChannelsValidateBeforeCall(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, customType, readReceipt, member, isDistinct, membersIn, userId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List channels (asynchronously)
     * ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels ----------------------------
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param distinctMode  (optional)
     * @param publicMode  (optional)
     * @param superMode  (optional)
     * @param createdAfter  (optional)
     * @param createdBefore  (optional)
     * @param showEmpty  (optional)
     * @param showMember  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMetadata  (optional)
     * @param showFrozen  (optional)
     * @param order  (optional)
     * @param metadataOrderKey  (optional)
     * @param customTypes  (optional)
     * @param customTypeStartswith  (optional)
     * @param channelUrls  (optional)
     * @param name  (optional)
     * @param nameContains  (optional)
     * @param nameStartswith  (optional)
     * @param membersExactlyIn  (optional)
     * @param membersIncludeIn  (optional)
     * @param queryType  (optional)
     * @param membersNickname  (optional)
     * @param membersNicknameContains  (optional)
     * @param metadataKey  (optional)
     * @param metadataValues  (optional)
     * @param metadataValueStartswith  (optional)
     * @param metacounterKey  (optional)
     * @param metacounterValues  (optional)
     * @param metacounterValueGt  (optional)
     * @param metacounterValueGte  (optional)
     * @param metacounterValueLt  (optional)
     * @param metacounterValueLte  (optional)
     * @param includeSortedMetaarrayInLastMessage  (optional)
     * @param customType  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @param isDistinct  (optional)
     * @param membersIn  (optional)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListChannelsAsync(String apiToken, String token, Integer limit, String distinctMode, String publicMode, String superMode, Integer createdAfter, Integer createdBefore, Boolean showEmpty, Boolean showMember, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMetadata, Boolean showFrozen, String order, String metadataOrderKey, String customTypes, String customTypeStartswith, String channelUrls, String name, String nameContains, String nameStartswith, String membersExactlyIn, String membersIncludeIn, String queryType, String membersNickname, String membersNicknameContains, String metadataKey, String metadataValues, String metadataValueStartswith, String metacounterKey, String metacounterValues, String metacounterValueGt, String metacounterValueGte, String metacounterValueLt, String metacounterValueLte, Boolean includeSortedMetaarrayInLastMessage, String customType, Boolean readReceipt, Boolean member, Boolean isDistinct, String membersIn, String userId, final ApiCallback<InlineResponse20017> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcListChannelsValidateBeforeCall(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, customType, readReceipt, member, isDistinct, membersIn, userId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcListMembers
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param order  (optional)
     * @param operatorFilter  (optional)
     * @param memberStateFilter  (optional)
     * @param mutedMemberFilter  (optional)
     * @param nicknameStartswith  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListMembersCall(String channelUrl, String apiToken, String token, Integer limit, Boolean showDeliveryReceipt, Boolean showReadReceipt, String order, String operatorFilter, String memberStateFilter, String mutedMemberFilter, String nicknameStartswith, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/members"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (showDeliveryReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_delivery_receipt", showDeliveryReceipt));
        }

        if (showReadReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_read_receipt", showReadReceipt));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (operatorFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator_filter", operatorFilter));
        }

        if (memberStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_state_filter", memberStateFilter));
        }

        if (mutedMemberFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("muted_member_filter", mutedMemberFilter));
        }

        if (nicknameStartswith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nickname_startswith", nicknameStartswith));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcListMembersValidateBeforeCall(String channelUrl, String apiToken, String token, Integer limit, Boolean showDeliveryReceipt, Boolean showReadReceipt, String order, String operatorFilter, String memberStateFilter, String mutedMemberFilter, String nicknameStartswith, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcListMembers(Async)");
        }
        

        okhttp3.Call localVarCall = gcListMembersCall(channelUrl, apiToken, token, limit, showDeliveryReceipt, showReadReceipt, order, operatorFilter, memberStateFilter, mutedMemberFilter, nicknameStartswith, _callback);
        return localVarCall;

    }

    /**
     * List members
     * ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param order  (optional)
     * @param operatorFilter  (optional)
     * @param memberStateFilter  (optional)
     * @param mutedMemberFilter  (optional)
     * @param nicknameStartswith  (optional)
     * @return InlineResponse20036
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20036 gcListMembers(String channelUrl, String apiToken, String token, Integer limit, Boolean showDeliveryReceipt, Boolean showReadReceipt, String order, String operatorFilter, String memberStateFilter, String mutedMemberFilter, String nicknameStartswith) throws ApiException {
        ApiResponse<InlineResponse20036> localVarResp = gcListMembersWithHttpInfo(channelUrl, apiToken, token, limit, showDeliveryReceipt, showReadReceipt, order, operatorFilter, memberStateFilter, mutedMemberFilter, nicknameStartswith);
        return localVarResp.getData();
    }

    /**
     * List members
     * ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param order  (optional)
     * @param operatorFilter  (optional)
     * @param memberStateFilter  (optional)
     * @param mutedMemberFilter  (optional)
     * @param nicknameStartswith  (optional)
     * @return ApiResponse&lt;InlineResponse20036&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20036> gcListMembersWithHttpInfo(String channelUrl, String apiToken, String token, Integer limit, Boolean showDeliveryReceipt, Boolean showReadReceipt, String order, String operatorFilter, String memberStateFilter, String mutedMemberFilter, String nicknameStartswith) throws ApiException {
        okhttp3.Call localVarCall = gcListMembersValidateBeforeCall(channelUrl, apiToken, token, limit, showDeliveryReceipt, showReadReceipt, order, operatorFilter, memberStateFilter, mutedMemberFilter, nicknameStartswith, null);
        Type localVarReturnType = new TypeToken<InlineResponse20036>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List members (asynchronously)
     * ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param order  (optional)
     * @param operatorFilter  (optional)
     * @param memberStateFilter  (optional)
     * @param mutedMemberFilter  (optional)
     * @param nicknameStartswith  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListMembersAsync(String channelUrl, String apiToken, String token, Integer limit, Boolean showDeliveryReceipt, Boolean showReadReceipt, String order, String operatorFilter, String memberStateFilter, String mutedMemberFilter, String nicknameStartswith, final ApiCallback<InlineResponse20036> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcListMembersValidateBeforeCall(channelUrl, apiToken, token, limit, showDeliveryReceipt, showReadReceipt, order, operatorFilter, memberStateFilter, mutedMemberFilter, nicknameStartswith, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20036>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcListMutedUsers
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListMutedUsersCall(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/mute"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcListMutedUsersValidateBeforeCall(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcListMutedUsers(Async)");
        }
        

        okhttp3.Call localVarCall = gcListMutedUsersCall(channelUrl, apiToken, token, limit, _callback);
        return localVarCall;

    }

    /**
     * List muted users
     * ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return InlineResponse20031
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20031 gcListMutedUsers(String channelUrl, String apiToken, String token, Integer limit) throws ApiException {
        ApiResponse<InlineResponse20031> localVarResp = gcListMutedUsersWithHttpInfo(channelUrl, apiToken, token, limit);
        return localVarResp.getData();
    }

    /**
     * List muted users
     * ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;InlineResponse20031&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20031> gcListMutedUsersWithHttpInfo(String channelUrl, String apiToken, String token, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = gcListMutedUsersValidateBeforeCall(channelUrl, apiToken, token, limit, null);
        Type localVarReturnType = new TypeToken<InlineResponse20031>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List muted users (asynchronously)
     * ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListMutedUsersAsync(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback<InlineResponse20031> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcListMutedUsersValidateBeforeCall(channelUrl, apiToken, token, limit, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20031>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcListOperators
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListOperatorsCall(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/operators"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcListOperatorsValidateBeforeCall(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcListOperators(Async)");
        }
        

        okhttp3.Call localVarCall = gcListOperatorsCall(channelUrl, apiToken, token, limit, _callback);
        return localVarCall;

    }

    /**
     * List operators
     * ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return InlineResponse20034
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20034 gcListOperators(String channelUrl, String apiToken, String token, Integer limit) throws ApiException {
        ApiResponse<InlineResponse20034> localVarResp = gcListOperatorsWithHttpInfo(channelUrl, apiToken, token, limit);
        return localVarResp.getData();
    }

    /**
     * List operators
     * ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;InlineResponse20034&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20034> gcListOperatorsWithHttpInfo(String channelUrl, String apiToken, String token, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = gcListOperatorsValidateBeforeCall(channelUrl, apiToken, token, limit, null);
        Type localVarReturnType = new TypeToken<InlineResponse20034>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List operators (asynchronously)
     * ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param token  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcListOperatorsAsync(String channelUrl, String apiToken, String token, Integer limit, final ApiCallback<InlineResponse20034> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcListOperatorsValidateBeforeCall(channelUrl, apiToken, token, limit, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20034>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcMuteUser
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcMuteUserData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMuteUserCall(String channelUrl, String apiToken, GcMuteUserData gcMuteUserData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcMuteUserData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/mute"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcMuteUserValidateBeforeCall(String channelUrl, String apiToken, GcMuteUserData gcMuteUserData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcMuteUser(Async)");
        }
        

        okhttp3.Call localVarCall = gcMuteUserCall(channelUrl, apiToken, gcMuteUserData, _callback);
        return localVarCall;

    }

    /**
     * Mute a user
     * ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcMuteUserData  (optional)
     * @return SendBirdGroupChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdGroupChannel gcMuteUser(String channelUrl, String apiToken, GcMuteUserData gcMuteUserData) throws ApiException {
        ApiResponse<SendBirdGroupChannel> localVarResp = gcMuteUserWithHttpInfo(channelUrl, apiToken, gcMuteUserData);
        return localVarResp.getData();
    }

    /**
     * Mute a user
     * ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcMuteUserData  (optional)
     * @return ApiResponse&lt;SendBirdGroupChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdGroupChannel> gcMuteUserWithHttpInfo(String channelUrl, String apiToken, GcMuteUserData gcMuteUserData) throws ApiException {
        okhttp3.Call localVarCall = gcMuteUserValidateBeforeCall(channelUrl, apiToken, gcMuteUserData, null);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mute a user (asynchronously)
     * ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcMuteUserData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcMuteUserAsync(String channelUrl, String apiToken, GcMuteUserData gcMuteUserData, final ApiCallback<SendBirdGroupChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcMuteUserValidateBeforeCall(channelUrl, apiToken, gcMuteUserData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcRegisterOperators
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcRegisterOperatorsData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcRegisterOperatorsCall(String channelUrl, String apiToken, GcRegisterOperatorsData gcRegisterOperatorsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcRegisterOperatorsData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/operators"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcRegisterOperatorsValidateBeforeCall(String channelUrl, String apiToken, GcRegisterOperatorsData gcRegisterOperatorsData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcRegisterOperators(Async)");
        }
        

        okhttp3.Call localVarCall = gcRegisterOperatorsCall(channelUrl, apiToken, gcRegisterOperatorsData, _callback);
        return localVarCall;

    }

    /**
     * Register operators
     * ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcRegisterOperatorsData  (optional)
     * @return InlineResponse20038
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20038 gcRegisterOperators(String channelUrl, String apiToken, GcRegisterOperatorsData gcRegisterOperatorsData) throws ApiException {
        ApiResponse<InlineResponse20038> localVarResp = gcRegisterOperatorsWithHttpInfo(channelUrl, apiToken, gcRegisterOperatorsData);
        return localVarResp.getData();
    }

    /**
     * Register operators
     * ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcRegisterOperatorsData  (optional)
     * @return ApiResponse&lt;InlineResponse20038&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20038> gcRegisterOperatorsWithHttpInfo(String channelUrl, String apiToken, GcRegisterOperatorsData gcRegisterOperatorsData) throws ApiException {
        okhttp3.Call localVarCall = gcRegisterOperatorsValidateBeforeCall(channelUrl, apiToken, gcRegisterOperatorsData, null);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register operators (asynchronously)
     * ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcRegisterOperatorsData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcRegisterOperatorsAsync(String channelUrl, String apiToken, GcRegisterOperatorsData gcRegisterOperatorsData, final ApiCallback<InlineResponse20038> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcRegisterOperatorsValidateBeforeCall(channelUrl, apiToken, gcRegisterOperatorsData, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcResetChatHistory
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcResetChatHistoryData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcResetChatHistoryCall(String channelUrl, String apiToken, GcResetChatHistoryData gcResetChatHistoryData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcResetChatHistoryData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/reset_user_history"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcResetChatHistoryValidateBeforeCall(String channelUrl, String apiToken, GcResetChatHistoryData gcResetChatHistoryData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcResetChatHistory(Async)");
        }
        

        okhttp3.Call localVarCall = gcResetChatHistoryCall(channelUrl, apiToken, gcResetChatHistoryData, _callback);
        return localVarCall;

    }

    /**
     * Reset chat history
     * ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcResetChatHistoryData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcResetChatHistory(String channelUrl, String apiToken, GcResetChatHistoryData gcResetChatHistoryData) throws ApiException {
        gcResetChatHistoryWithHttpInfo(channelUrl, apiToken, gcResetChatHistoryData);
    }

    /**
     * Reset chat history
     * ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcResetChatHistoryData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcResetChatHistoryWithHttpInfo(String channelUrl, String apiToken, GcResetChatHistoryData gcResetChatHistoryData) throws ApiException {
        okhttp3.Call localVarCall = gcResetChatHistoryValidateBeforeCall(channelUrl, apiToken, gcResetChatHistoryData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset chat history (asynchronously)
     * ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcResetChatHistoryData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcResetChatHistoryAsync(String channelUrl, String apiToken, GcResetChatHistoryData gcResetChatHistoryData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcResetChatHistoryValidateBeforeCall(channelUrl, apiToken, gcResetChatHistoryData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcUnbanUserById
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUnbanUserByIdCall(String channelUrl, String bannedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "banned_user_id" + "\\}", localVarApiClient.escapeString(bannedUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcUnbanUserByIdValidateBeforeCall(String channelUrl, String bannedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcUnbanUserById(Async)");
        }
        
        // verify the required parameter 'bannedUserId' is set
        if (bannedUserId == null) {
            throw new ApiException("Missing the required parameter 'bannedUserId' when calling gcUnbanUserById(Async)");
        }
        

        okhttp3.Call localVarCall = gcUnbanUserByIdCall(channelUrl, bannedUserId, apiToken, _callback);
        return localVarCall;

    }

    /**
     * Unban a user
     * ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcUnbanUserById(String channelUrl, String bannedUserId, String apiToken) throws ApiException {
        gcUnbanUserByIdWithHttpInfo(channelUrl, bannedUserId, apiToken);
    }

    /**
     * Unban a user
     * ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcUnbanUserByIdWithHttpInfo(String channelUrl, String bannedUserId, String apiToken) throws ApiException {
        okhttp3.Call localVarCall = gcUnbanUserByIdValidateBeforeCall(channelUrl, bannedUserId, apiToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unban a user (asynchronously)
     * ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUnbanUserByIdAsync(String channelUrl, String bannedUserId, String apiToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcUnbanUserByIdValidateBeforeCall(channelUrl, bannedUserId, apiToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcUnhideOrUnarchiveChannel
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @param shouldUnhideAll  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUnhideOrUnarchiveChannelCall(String channelUrl, String userId, String apiToken, Boolean shouldUnhideAll, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/hide"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (shouldUnhideAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_unhide_all", shouldUnhideAll));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcUnhideOrUnarchiveChannelValidateBeforeCall(String channelUrl, String userId, String apiToken, Boolean shouldUnhideAll, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcUnhideOrUnarchiveChannel(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling gcUnhideOrUnarchiveChannel(Async)");
        }
        

        okhttp3.Call localVarCall = gcUnhideOrUnarchiveChannelCall(channelUrl, userId, apiToken, shouldUnhideAll, _callback);
        return localVarCall;

    }

    /**
     * Unhide or unarchive a channel
     * ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @param shouldUnhideAll  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcUnhideOrUnarchiveChannel(String channelUrl, String userId, String apiToken, Boolean shouldUnhideAll) throws ApiException {
        gcUnhideOrUnarchiveChannelWithHttpInfo(channelUrl, userId, apiToken, shouldUnhideAll);
    }

    /**
     * Unhide or unarchive a channel
     * ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @param shouldUnhideAll  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcUnhideOrUnarchiveChannelWithHttpInfo(String channelUrl, String userId, String apiToken, Boolean shouldUnhideAll) throws ApiException {
        okhttp3.Call localVarCall = gcUnhideOrUnarchiveChannelValidateBeforeCall(channelUrl, userId, apiToken, shouldUnhideAll, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unhide or unarchive a channel (asynchronously)
     * ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
     * @param channelUrl  (required)
     * @param userId  (required)
     * @param apiToken  (optional)
     * @param shouldUnhideAll  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUnhideOrUnarchiveChannelAsync(String channelUrl, String userId, String apiToken, Boolean shouldUnhideAll, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcUnhideOrUnarchiveChannelValidateBeforeCall(channelUrl, userId, apiToken, shouldUnhideAll, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcUnmuteUserById
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUnmuteUserByIdCall(String channelUrl, String mutedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/mute/{muted_user_id}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "muted_user_id" + "\\}", localVarApiClient.escapeString(mutedUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcUnmuteUserByIdValidateBeforeCall(String channelUrl, String mutedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcUnmuteUserById(Async)");
        }
        
        // verify the required parameter 'mutedUserId' is set
        if (mutedUserId == null) {
            throw new ApiException("Missing the required parameter 'mutedUserId' when calling gcUnmuteUserById(Async)");
        }
        

        okhttp3.Call localVarCall = gcUnmuteUserByIdCall(channelUrl, mutedUserId, apiToken, _callback);
        return localVarCall;

    }

    /**
     * Unmute a user
     * ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user ----------------------------
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void gcUnmuteUserById(String channelUrl, String mutedUserId, String apiToken) throws ApiException {
        gcUnmuteUserByIdWithHttpInfo(channelUrl, mutedUserId, apiToken);
    }

    /**
     * Unmute a user
     * ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user ----------------------------
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gcUnmuteUserByIdWithHttpInfo(String channelUrl, String mutedUserId, String apiToken) throws ApiException {
        okhttp3.Call localVarCall = gcUnmuteUserByIdValidateBeforeCall(channelUrl, mutedUserId, apiToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unmute a user (asynchronously)
     * ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user ----------------------------
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUnmuteUserByIdAsync(String channelUrl, String mutedUserId, String apiToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcUnmuteUserByIdValidateBeforeCall(channelUrl, mutedUserId, apiToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcUpdateBanById
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param gcUpdateBanByIdData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUpdateBanByIdCall(String channelUrl, String bannedUserId, String apiToken, GcUpdateBanByIdData gcUpdateBanByIdData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcUpdateBanByIdData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "banned_user_id" + "\\}", localVarApiClient.escapeString(bannedUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcUpdateBanByIdValidateBeforeCall(String channelUrl, String bannedUserId, String apiToken, GcUpdateBanByIdData gcUpdateBanByIdData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcUpdateBanById(Async)");
        }
        
        // verify the required parameter 'bannedUserId' is set
        if (bannedUserId == null) {
            throw new ApiException("Missing the required parameter 'bannedUserId' when calling gcUpdateBanById(Async)");
        }
        

        okhttp3.Call localVarCall = gcUpdateBanByIdCall(channelUrl, bannedUserId, apiToken, gcUpdateBanByIdData, _callback);
        return localVarCall;

    }

    /**
     * Update a ban
     * ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param gcUpdateBanByIdData  (optional)
     * @return SendBirdUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdUser gcUpdateBanById(String channelUrl, String bannedUserId, String apiToken, GcUpdateBanByIdData gcUpdateBanByIdData) throws ApiException {
        ApiResponse<SendBirdUser> localVarResp = gcUpdateBanByIdWithHttpInfo(channelUrl, bannedUserId, apiToken, gcUpdateBanByIdData);
        return localVarResp.getData();
    }

    /**
     * Update a ban
     * ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param gcUpdateBanByIdData  (optional)
     * @return ApiResponse&lt;SendBirdUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdUser> gcUpdateBanByIdWithHttpInfo(String channelUrl, String bannedUserId, String apiToken, GcUpdateBanByIdData gcUpdateBanByIdData) throws ApiException {
        okhttp3.Call localVarCall = gcUpdateBanByIdValidateBeforeCall(channelUrl, bannedUserId, apiToken, gcUpdateBanByIdData, null);
        Type localVarReturnType = new TypeToken<SendBirdUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a ban (asynchronously)
     * ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param gcUpdateBanByIdData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUpdateBanByIdAsync(String channelUrl, String bannedUserId, String apiToken, GcUpdateBanByIdData gcUpdateBanByIdData, final ApiCallback<SendBirdUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcUpdateBanByIdValidateBeforeCall(channelUrl, bannedUserId, apiToken, gcUpdateBanByIdData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcUpdateChannelByUrl
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcUpdateChannelByUrlData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUpdateChannelByUrlCall(String channelUrl, String apiToken, GcUpdateChannelByUrlData gcUpdateChannelByUrlData, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gcUpdateChannelByUrlData;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcUpdateChannelByUrlValidateBeforeCall(String channelUrl, String apiToken, GcUpdateChannelByUrlData gcUpdateChannelByUrlData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcUpdateChannelByUrl(Async)");
        }
        

        okhttp3.Call localVarCall = gcUpdateChannelByUrlCall(channelUrl, apiToken, gcUpdateChannelByUrlData, _callback);
        return localVarCall;

    }

    /**
     * Update a channel
     * ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcUpdateChannelByUrlData  (optional)
     * @return SendBirdGroupChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdGroupChannel gcUpdateChannelByUrl(String channelUrl, String apiToken, GcUpdateChannelByUrlData gcUpdateChannelByUrlData) throws ApiException {
        ApiResponse<SendBirdGroupChannel> localVarResp = gcUpdateChannelByUrlWithHttpInfo(channelUrl, apiToken, gcUpdateChannelByUrlData);
        return localVarResp.getData();
    }

    /**
     * Update a channel
     * ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcUpdateChannelByUrlData  (optional)
     * @return ApiResponse&lt;SendBirdGroupChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdGroupChannel> gcUpdateChannelByUrlWithHttpInfo(String channelUrl, String apiToken, GcUpdateChannelByUrlData gcUpdateChannelByUrlData) throws ApiException {
        okhttp3.Call localVarCall = gcUpdateChannelByUrlValidateBeforeCall(channelUrl, apiToken, gcUpdateChannelByUrlData, null);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a channel (asynchronously)
     * ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel ----------------------------
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param gcUpdateChannelByUrlData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcUpdateChannelByUrlAsync(String channelUrl, String apiToken, GcUpdateChannelByUrlData gcUpdateChannelByUrlData, final ApiCallback<SendBirdGroupChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcUpdateChannelByUrlValidateBeforeCall(channelUrl, apiToken, gcUpdateChannelByUrlData, _callback);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcViewBanById
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewBanByIdCall(String channelUrl, String bannedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "banned_user_id" + "\\}", localVarApiClient.escapeString(bannedUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcViewBanByIdValidateBeforeCall(String channelUrl, String bannedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcViewBanById(Async)");
        }
        
        // verify the required parameter 'bannedUserId' is set
        if (bannedUserId == null) {
            throw new ApiException("Missing the required parameter 'bannedUserId' when calling gcViewBanById(Async)");
        }
        

        okhttp3.Call localVarCall = gcViewBanByIdCall(channelUrl, bannedUserId, apiToken, _callback);
        return localVarCall;

    }

    /**
     * View a ban
     * ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @return SendBirdUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdUser gcViewBanById(String channelUrl, String bannedUserId, String apiToken) throws ApiException {
        ApiResponse<SendBirdUser> localVarResp = gcViewBanByIdWithHttpInfo(channelUrl, bannedUserId, apiToken);
        return localVarResp.getData();
    }

    /**
     * View a ban
     * ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @return ApiResponse&lt;SendBirdUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdUser> gcViewBanByIdWithHttpInfo(String channelUrl, String bannedUserId, String apiToken) throws ApiException {
        okhttp3.Call localVarCall = gcViewBanByIdValidateBeforeCall(channelUrl, bannedUserId, apiToken, null);
        Type localVarReturnType = new TypeToken<SendBirdUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a ban (asynchronously)
     * ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban ----------------------------
     * @param channelUrl  (required)
     * @param bannedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewBanByIdAsync(String channelUrl, String bannedUserId, String apiToken, final ApiCallback<SendBirdUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcViewBanByIdValidateBeforeCall(channelUrl, bannedUserId, apiToken, _callback);
        Type localVarReturnType = new TypeToken<SendBirdUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcViewChannelByUrl
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMember  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewChannelByUrlCall(String channelUrl, String apiToken, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMember, Boolean readReceipt, Boolean member, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showDeliveryReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_delivery_receipt", showDeliveryReceipt));
        }

        if (showReadReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_read_receipt", showReadReceipt));
        }

        if (showMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_member", showMember));
        }

        if (readReceipt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read_receipt", readReceipt));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcViewChannelByUrlValidateBeforeCall(String channelUrl, String apiToken, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMember, Boolean readReceipt, Boolean member, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcViewChannelByUrl(Async)");
        }
        

        okhttp3.Call localVarCall = gcViewChannelByUrlCall(channelUrl, apiToken, showDeliveryReceipt, showReadReceipt, showMember, readReceipt, member, _callback);
        return localVarCall;

    }

    /**
     * View a channel
     * ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMember  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @return SendBirdGroupChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SendBirdGroupChannel gcViewChannelByUrl(String channelUrl, String apiToken, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMember, Boolean readReceipt, Boolean member) throws ApiException {
        ApiResponse<SendBirdGroupChannel> localVarResp = gcViewChannelByUrlWithHttpInfo(channelUrl, apiToken, showDeliveryReceipt, showReadReceipt, showMember, readReceipt, member);
        return localVarResp.getData();
    }

    /**
     * View a channel
     * ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMember  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @return ApiResponse&lt;SendBirdGroupChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendBirdGroupChannel> gcViewChannelByUrlWithHttpInfo(String channelUrl, String apiToken, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMember, Boolean readReceipt, Boolean member) throws ApiException {
        okhttp3.Call localVarCall = gcViewChannelByUrlValidateBeforeCall(channelUrl, apiToken, showDeliveryReceipt, showReadReceipt, showMember, readReceipt, member, null);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a channel (asynchronously)
     * ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel ----------------------------   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
     * @param channelUrl  (required)
     * @param apiToken  (optional)
     * @param showDeliveryReceipt  (optional)
     * @param showReadReceipt  (optional)
     * @param showMember  (optional)
     * @param readReceipt  (optional)
     * @param member  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewChannelByUrlAsync(String channelUrl, String apiToken, Boolean showDeliveryReceipt, Boolean showReadReceipt, Boolean showMember, Boolean readReceipt, Boolean member, final ApiCallback<SendBirdGroupChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcViewChannelByUrlValidateBeforeCall(channelUrl, apiToken, showDeliveryReceipt, showReadReceipt, showMember, readReceipt, member, _callback);
        Type localVarReturnType = new TypeToken<SendBirdGroupChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gcViewMuteById
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewMuteByIdCall(String channelUrl, String mutedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/group_channels/{channel_url}/mute/{muted_user_id}"
            .replaceAll("\\{" + "channel_url" + "\\}", localVarApiClient.escapeString(channelUrl.toString()))
            .replaceAll("\\{" + "muted_user_id" + "\\}", localVarApiClient.escapeString(mutedUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiToken != null) {
            localVarHeaderParams.put("Api-Token", localVarApiClient.parameterToString(apiToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gcViewMuteByIdValidateBeforeCall(String channelUrl, String mutedUserId, String apiToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelUrl' is set
        if (channelUrl == null) {
            throw new ApiException("Missing the required parameter 'channelUrl' when calling gcViewMuteById(Async)");
        }
        
        // verify the required parameter 'mutedUserId' is set
        if (mutedUserId == null) {
            throw new ApiException("Missing the required parameter 'mutedUserId' when calling gcViewMuteById(Async)");
        }
        

        okhttp3.Call localVarCall = gcViewMuteByIdCall(channelUrl, mutedUserId, apiToken, _callback);
        return localVarCall;

    }

    /**
     * View a mute
     * ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute ----------------------------
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @return InlineResponse20035
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20035 gcViewMuteById(String channelUrl, String mutedUserId, String apiToken) throws ApiException {
        ApiResponse<InlineResponse20035> localVarResp = gcViewMuteByIdWithHttpInfo(channelUrl, mutedUserId, apiToken);
        return localVarResp.getData();
    }

    /**
     * View a mute
     * ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute ----------------------------
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @return ApiResponse&lt;InlineResponse20035&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20035> gcViewMuteByIdWithHttpInfo(String channelUrl, String mutedUserId, String apiToken) throws ApiException {
        okhttp3.Call localVarCall = gcViewMuteByIdValidateBeforeCall(channelUrl, mutedUserId, apiToken, null);
        Type localVarReturnType = new TypeToken<InlineResponse20035>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a mute (asynchronously)
     * ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute ----------------------------
     * @param channelUrl  (required)
     * @param mutedUserId  (required)
     * @param apiToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gcViewMuteByIdAsync(String channelUrl, String mutedUserId, String apiToken, final ApiCallback<InlineResponse20035> _callback) throws ApiException {

        okhttp3.Call localVarCall = gcViewMuteByIdValidateBeforeCall(channelUrl, mutedUserId, apiToken, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20035>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
